#!/bin/bash
#
# Move file into a similar named directory
# Copyright (C) 2014, B.G.L. Nelissen. All rights reserved.
# 
#
# License here
#
# Respect the Google Shell style guide.
# http://google-styleguide.googlecode.com/svn/trunk/shell.xml
#
# This is quite an overkill for the job, I know. But it is done like this
# to keep the things organized and to make future updates easier
#
# Variables
SCRIPTNAME="$(basename $0)"
DESCRIPTIONSHORT="Move file into a similar named directory"
DEPENDENCIES=("convert" "parallel")

# Errors go to stderr
err() {
  echo "ERROR: $@" >&2
}

# usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME file
        [--help]
EOF
}

# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=VALUE]        Move file into a similar named directory 

  --help                    display this help and exit

examples:
  $SCRIPTNAME "file.tif"
  $SCRIPTNAME  --file="file.tif"

multiple files at once:
  find -L ./ -name "*tif" -exec "$SCRIPTNAME" "{}" \;

dependencies: ${DEPENDENCIES[@]}

Move file into a similar named directory.
Report bugs to <b.g.l.nelissen@gmail.com>
EOF
}

# Menu
# Empty variables
FILE=""
# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
# Defaults
# set FILE
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    err "No such file: $FILE"
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPS=""
  DEPS_FAIL="0"
  for DEP in "${DEPENDENCIES[@]}"; do
    if [[ 0 != "$(command -v "$DEP" >/dev/null ;echo "$?")" ]]; then
       err "Missing dependency: $DEP"
       DEPS_FAIL=$(($DEPS_FAIL + 1))
    fi
  done
  if [[ "$DEPS_FAIL" > 0 ]]; then
    err "Fix missing dependencies (${DEPS_FAIL})"
    usage
    exit 1
  fi
}
# actual program
programOutput(){
  FILEFULL="$(echo "$(cd "$(dirname "$FILE")"; pwd)"/"$(basename "$FILE")")" # full path $FULL
  BASENAME="$(basename "$FILEFULL")"    # basename
  EXTENSION="${BASENAME##*.}"         # extension
  FILEPATH="${FILEFULL%.*}"           # full path, no extension
  FILENAME="${BASENAME%.*}"           # filename, no extension"
  mkdir -p "$FILEPATH"
  mv "$FILE" "$FILEPATH"/
}

# all check?
checkRequirements
checkDependencies

# lets go!
programOutput