#!/bin/bash
#
# Description: Create scaled mask and macro from a virtual slide
# 
# The MIT License (MIT)
# Copyright (c) 2014, UMC Utrecht, B.G.L. Nelissen
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

# Variables
SCRIPTNAME=$(basename $0)
DESCRIPTIONSHORT="Create scaled mask and macro from a virtual slide"
DEPENDENCIES=("convert" "parallel")
MASKSUFFIX_DEFAULT=".mask"
MACROSUFFIX_DEFAULT=".macro"
MACRO_THUMBSIZE="2000x2000" # Maximum size of macro image
# Errors go to stderr
err() {
  echo "ERROR: $@" >&2
}
# usage message
usage() {
cat <<- EOF
usage:  
$SCRIPTNAME [options] -f <filename>
Try $SCRIPTNAME --help for more information.
EOF
}
# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

usage:
  $SCRIPTNAME [options] -f <filename>

options:
  -f, --file <filename>      virtual slide to create mask from

  [--masksuffix] <text>      mask suffix ["$MASKSUFFIX_DEFAULT"]
  [--macrosuffix] <text>     macro suffix ["$MACROSUFFIX_DEFAULT"]
  [-l, --layer] <integer>    force specific layer by layer id

  --help                     display this help
  -h                         display usage

examples:
  $SCRIPTNAME "file.tif"
  $SCRIPTNAME  --file="file.tif"

multiple files at once:
  find ./ -iname "*tif" | parallel "$(command -v "$SCRIPTNAME")" "{}"

HPC qsub commands (commands to stdout only):
  find ./ -iname "*tif" -print0 | while IFS= read -r -d '' file; do
    j="\$(echo "\$(cd "\$(dirname "\$file")"; pwd)"/"\$(basename "\$file")")"; \\
    echo "qsub" -pe threaded 1 -q veryshort \\
    "$(command -v "$SCRIPTNAME")" --file=\""\${j}"\"
  done

dependencies: ${DEPENDENCIES[@]}

You can mask parts of your image that you do not wat to process. This
program will automatically create a mask for you which you can later
edit if needed. The mask is a layer or the original TIF file, hte layer
id is choosen automatically. The slideToolkit only excludes real black
(color #000000). Two new files will be created, one file.macro.png and
one file.mask.png. Existing files will be overwritten.

The slideToolkit and all its tools are released under the terms of the MIT license
The slideToolkit (C) 2014, UMC Utrecht, B.G.L. Nelissen
Report issues at https://github.com/bglnelissen/slideToolkit/issues

EOF
}
# Menu
# Empty variables
FILE=""
LAYER=""
MASKSUFFIX=""
MACROSUFFIX=""

# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    -h)
      usage
      exit 0 ;;
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    -l | --layer)
      LAYER=$2
      shift 2 ;;
    --layer=*)
      LAYER=${1#*=}
      shift ;;
    --masksuffix)
      MASKSUFFIX=$2
      shift 2 ;;
    --masksuffix=*)
      MASKSUFFIX=${1#*=}
      shift ;;
    --macrosuffix)
      MACROSUFFIX=$2
      shift 2 ;;
    --macrosuffix=*)
      MACROSUFFIX=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
# DEFAULTS
# set FILE
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi
# set MASKSUFFIX default
if [ "$MASKSUFFIX" != "" ]; then
  MASKSUFFIX="$MASKSUFFIX"
else
  MASKSUFFIX="$MASKSUFFIX_DEFAULT"
fi
# set MACROSUFFIX default
if [ "$MACROSUFFIX" != "" ]; then
  MACROSUFFIX="$MACROSUFFIX"
else
  MACROSUFFIX="$MACROSUFFIX_DEFAULT"
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    err "No such file: $FILE"
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPS=""
  DEPS_FAIL="0"
  for DEP in ${DEPENDENCIES[@]}; do
    if [[ 0 != "$(command -v "$DEP" >/dev/null ;echo "$?")" ]]; then
       err "Missing dependency: $DEP"
       DEPS_FAIL=$(($DEPS_FAIL + 1))
    fi
  done
  if [[ "$DEPS_FAIL" > 0 ]]; then
    err "Fix missing dependencies (${DEPS_FAIL})"
    usage
    exit 1
  fi
}

# get mask function for each type of scanner
getThumbiScanHT(){
  if [ "$LAYER" != "" ]; then
    LAYER="$LAYER"
  else
    # layer 8 contains the macro
    LAYER=8
  fi
	convert "$FILEFULL[$LAYER]" -resize "${MACRO_THUMBSIZE}>" -fuzz 1% -transparent "#ECECEC"  "$MACRO"
}
macroOlympusDP71(){
  if [ "$LAYER" != "" ]; then
    LAYER="$LAYER"
  else
    # layer 0 contains the macro
    LAYER=0
  fi
	convert "$FILEFULL[$LAYER]" -resize "${MACRO_THUMBSIZE}>" -fuzz 1% -transparent "#ECECEC"  "$MACRO"
}


# actual program
programOutput(){
  # set variables
  LAYER="$LAYER"
  FILEFULL="$(echo "$(cd "$(dirname "$FILE")"; pwd)"/"$(basename "$FILE")")" # full path $FULL
  BASENAME="$(basename "$FILEFULL")"    # basename
  EXTENSION="${BASENAME##*.}"         # extension
  FILEPATH="${FILEFULL%.*}"           # full path, no extension
  FILENAME="${BASENAME%.*}"           # filename, no extension"
  MASK="${FILEPATH}${MASKSUFFIX}.png"
  MACRO="${FILEPATH}${MACROSUFFIX}.png"

  # create macro
  # check metadata for scanner data
  if [[ "0" < "$(tiffinfo  "$FILEFULL" | strings | grep "iScanHT" | wc -l)" ]]; then
    getThumbiScanHT # iScanHT found
  elif [[ "0" < "$(tiffinfo  "$FILEFULL" | strings | grep "DP71" | wc -l)" ]]; then
    macroOlympusDP71  # Aperio found
  else
    err "Unknown virtual slide format: $FILEFULL"
    usage
    exit 1
  fi
  
  # create mask
  # a fuzz of 3% works well, but fails on very light slides
  # a fuzz of 2% is mightby to easy on the selection
  # a fuzz of 2.5% is possible (but still to stringend on some slides)
  #	 - add a border so blur works on the whole image
  #	 - blur the image to fill small holes (blur is slow, but necessary)
  #	 - make all white transparent (background)
  #	 - remove the border
  #	 - create alpha and save file
  convert "$MACRO" \( "$MACRO" \
    -bordercolor white -border 100x100 \
    -blur 40x40 \
    -fuzz 2% -transparent white \
    -crop +100+100 -crop -100-100 +repage \
    -alpha extract -transparent white \) \
    -flatten "$MASK"
}
# all check?
checkRequirements
checkDependencies 

# lets go!
# actual program
programOutput