#!/bin/bash
#
# Description: Create macro and mask from virtual slide
# Copyright (C) 2014, B.G.L. Nelissen. All rights reserved.
# Last edit: 8 march 2014
#
# License here.
#
# Respect the Google Shell style guide.
# http://google-styleguide.googlecode.com/svn/trunk/shell.xml

# Variables
SCRIPTNAME=$(basename $0)
DESCRIPTIONSHORT="Create macro and mask from virtual slide"

# Errors go to stderr
err() {
  echo "ERROR: $@" >&2
}
# usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME [options] [path/]file
        [--help]
EOF
}
# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=FILE]         virtual slide to create mask from

  --help                    display this help and exit

examples:
  $SCRIPTNAME "file.tif"
  $SCRIPTNAME  --file="file.tif"
  find [path/] -name '*.tif' | parallel [path/]slideMask {} 
  find [path/] -name '*.tif' -exec qsub [path/]slideMask {} \; 

Sometimes not all tissue on your virtual slide needs processing. You can
mask parts of your image that you do not wat to process. This program
will automatically create a mask for you which you can later edit if
needed. The slideToolkit only excludes real black (color #000000). Two
new files will be created, one file.macro.png and one file.mask.png.
Existing files will be overwritten.

Report bugs to <b.g.l.nelissen@gmail.com>
slideToolkit (C) 2014, B.G.L. Nelissen
EOF
}
# Menu
# Empty variables
FILE=""
# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
# DEFAULTS
# set FILE
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    err "No such file: $FILE"
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPENDENCIES=("convert")
  DEPS=""
  for DEP in $DEPENDENCIES; do
    if [[ 0 != $(command -v "$DEP" >/dev/null ;echo $?) ]]; then
      DEPS=$(echo "$DEPS \"$DEP\"") # create `array` with unknown dependencies
    fi
  done
  if [[ "" != "$DEPS" ]]; then
    for d in "$DEPS"; do
      err "Missing dependency: $d"
    done
    exit 1
  fi
}

# actual program
programOutput(){
  # set variables
  LAYER=8
  FILEFULL="$(echo $(cd $(dirname $FILE); pwd)/$(basename $FILE))" # full path $FULL
  BASENAME=$(basename "$FILEFULL")    # basename
  EXTENSION="${BASENAME##*.}"         # extension
  FILEPATH="${FILEFULL%.*}"           # full path, no extension
  FILENAME="${BASENAME%.*}"           # filename, no extension"
  MASK="$FILEPATH.mask.png"
  MACRO="$FILEPATH.macro.png"

  # create macro
  convert $FILEFULL[$LAYER] -fuzz 1% -transparent "#ECECEC"  $MACRO
  # create mask
  # a fuzz of 3% works well, but fails on very light slides
  # a fuzz of 2% is mightby to easy on the selection
  # a fuzz of 2.5% is possible (but still to stringend on some slides)
  #	 - add a border so blur works on the whole image
  #	 - blur the image to fill small holes (blur is slow, but necessary)
  #	 - make all white transparent (background)
  #	 - remove the border
  #	 - create alpha and save file
  convert $MACRO \( $MACRO \
    -bordercolor white -border 100x100 \
    -blur 40x40 \
    -fuzz 2% -transparent white \
    -crop +100+100 -crop -100-100 +repage \
    -alpha extract -transparent white \) \
    -flatten $MASK
}
# all check?
checkRequirements
checkDependencies 

# lets go!
# actual program
programOutput