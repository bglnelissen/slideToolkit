#!/bin/bash
#
# Description: Create thumb from virtual slide
# Copyright (C) 2014, B.G.L. Nelissen. All rights reserved.
# Last edit: 8 march 2014
#
# License here.
#
<<<<<<< HEAD
=======
#
# License here
#
>>>>>>> FETCH_HEAD
# Respect the Google Shell style guide.
# http://google-styleguide.googlecode.com/svn/trunk/shell.xml

# Variables
SCRIPTNAME=$(basename $0)
DESCRIPTIONSHORT="Rename virtual slide using the thumbnail"
DEPENDENCIES=("convert" "identify" "parallel" "perl" "tiffinfo")
PREVIEWDIMENSIONS="512x1024"
DEFAULT_OUTPUT_PREFIX="" # empty by default
DEFAULT_OUTPUT_SUFFIX="" # empty by default
DEFAULT_IM_ARGS="" # imagemagick arguments

# DEBUG setting, remove before going live
# set -o verbose

# Exit and cleanup
set -e
function cleanup {
  # quit Preview
  osascript -e "ignoring application responses" -e "tell application \"Preview\"" -e "if it is running then" -e "quit with saving" -e "end if" -e "end tell" -e "end ignoring"
  # remove temp files
  rm -rf "$PREVIEW_TMPFILE"
  echo
}
trap cleanup EXIT

# Errors go to stderr
err() {
  echo "ERROR: $@" >&2
}

# usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME [options] [path/]file
        [--help]
EOF
}

# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=FILE]         virtual slide to rename
  -l, --layer[=INT]         force specific layer by layer id
  --prefix[=TEXT]           filename prefix
  --suffix[=TEXT]           filename suffix
  --args[=ARGUMENTS]        convert (imageMagick) arguments for extra enhancement
  
  --help                    display this help and exit

examples:
  $SCRIPTNAME "file.tif"
  $SCRIPTNAME --prefix="AE" --suffix=".CD68" "file.tif"
  $SCRIPTNAME  --layer=5 --args="-threshold 90%" "file.tif"

multiple files at once:
     find -L ./ -name "*tif" -exec "\$(command -v "$SCRIPTNAME")" "{}" \;

dependencies: ${DEPENDENCIES[@]}

A virtual slide is usually variant of a multilayered/pyramid TIFF file.
Different vendors store an overview of each slide in one (or more) of
these layers. This script displays the correct layers and resizes,
rotates and concatenates when necessary and asks for a new name. The
image theshold can be used to increase the contrast and make unreadable
barcodes readable again, you can use --args="-threshold 90%" for example.
Report bugs to <b.g.l.nelissen@gmail.com>
slideToolkit (C) 2014, B.G.L. Nelissen
EOF
}

# Menu
# Empty variables
FILE=""
LAYER=""

# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    -l | --layer)
      LAYER=$2
      shift 2 ;;
    --layer=*)
      LAYER=${1#*=}
      shift ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    --prefix=*)
      OUTPUT_PREFIX=${1#*=}
      shift ;;
    --suffix=*)
      OUTPUT_SUFFIX=${1#*=}
      shift ;;
    --args=*)
      IM_ARGS=${1#*=}
      shift ;;
    --extension=*)
      OUTPUT_EXTENSION=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
# DEFAULTS
# set FILE default
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi
# set OUTPUT_PREFIX default
if [ "$OUTPUT_PREFIX" != "" ]; then
  OUTPUT_PREFIX="$OUTPUT_PREFIX"
else
  OUTPUT_PREFIX="$DEFAULT_OUTPUT_PREFIX"
fi
# set OUTPUT_SUFFIX default
if [ "$OUTPUT_SUFFIX" != "" ]; then
  OUTPUT_SUFFIX="$OUTPUT_SUFFIX"
else
  OUTPUT_SUFFIX="$DEFAULT_OUTPUT_SUFFIX"
fi

# set IM_ARGS default
if [ "$IM_ARGS" != "" ]; then
  IM_ARGS="$IM_ARGS"
else
  IM_ARGS="$DEFAULT_IM_ARGS"
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    err "No such file: $FILE"
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPS=""
  DEPS_FAIL="0"
  for DEP in "${DEPENDENCIES[@]}"; do
    if [[ 0 != "$(command -v "$DEP" >/dev/null ;echo "$?")" ]]; then
       err "Missing dependency: $DEP"
       DEPS_FAIL=$(($DEPS_FAIL + 1))
    fi
  done
  if [[ "$DEPS_FAIL" > 0 ]]; then
    err "Fix missing dependencies (${DEPS_FAIL})"
    usage
    exit 1
  fi
}

# show thumbs per scanner type
getThumbiScanHT(){
  if [ "$LAYER" != "" ]; then
    LAYER="$LAYER"
  else
    LAYER=0
  fi
	# get the thumb
	convert "$FILEFULL[$LAYER]"  $IM_ARGS -filter box -resize "$PREVIEWDIMENSIONS" "$PREVIEW_TMPFILE"
}
getThumbAperio(){
  if [ "$LAYER" != "" ]; then
    convert "$FILEFULL"[$LAYER]  $IM_ARGS -resize "$PREVIEWDIMENSIONS" "$PREVIEW_TMPFILE"
  else
    # the last 2 layers contain thumb and the tissue (couning starts at 0)
    NR_LAYERS=`identify "$FILE" | wc -l`
    N_LABEL="$(($NR_LAYERS - 2))"
    N_TISSUE="$(($NR_LAYERS - 1))"
    # get label, get tissue, rotate and resize both, then concatenate 
    convert "$FILEFULL[$N_LABEL]" $IM_ARGS -resize "$PREVIEWDIMENSIONS" "$PREVIEW_TMPFILE"
  fi
}

programOutput(){
  # set variables
  FILE="$FILE"
  # path variables
  FILEFULL="$(echo "$(cd "$(dirname "$FILE")"; pwd)"/"$(basename "$FILE")")" # full path $FULL
  BASENAME="$(basename "$FILEFULL")"    # basename
  DIRNAME="$(dirname "$FILEFULL")"          # dirname
  EXTENSION="${BASENAME##*.}"           # extension
  FILEPATH="${FILEFULL%.*}"             # full path, no extension
  FILENAME="${BASENAME%.*}"             # filename, no extension"
  # create tmp working file
  PREVIEW_TMPFILE="$(mktemp -q /tmp/${SCRIPTNAME}.XXXXXX)".png
  if [ $? -ne 0 ]; then
       err "$0: Can't create temp file, exiting..."
       exit 1
  fi  
  
  # check metadata for scanner data
  if [[ "0" < "$(tiffinfo  "$FILE" | strings | grep "iScanHT" | wc -l | awk '{print $1}' )" ]]; then
    getThumbiScanHT # iScanHT found
  elif [[ "0" < "$(tiffinfo  "$FILE" | strings | grep "Aperio" | wc -l | awk '{print $1}')" ]]; then
    getThumbAperio  # Aperio found
  else
    err "Unknown virtual slide format: $FILE"
    usage
    exit 1
  fi
  # show file
  open -g -a Preview "$PREVIEW_TMPFILE"

  echo "Current name: $FILENAME"
  echo "Rename your slide. [n-enter next slide] [ctrl-c to quit]"
  if [[ "" != "$OUTPUT_PREFIX" || "" != "$OUTPUT_SUFFIX" ]]; then
    echo "Prefix: \"$OUTPUT_PREFIX\" Suffix: \"$OUTPUT_SUFFIX\""
  fi
  read -p "Enter slide name:" SLIDENAME_UNSAVE
  SLIDENAME=$(printf "${OUTPUT_PREFIX}${SLIDENAME_UNSAVE}${OUTPUT_SUFFIX}" | perl -p -e 's/[^A-Za-z0-9._-]/_/g') # printf keeps it all on one line
  OUTPUTFILE="${DIRNAME}/${SLIDENAME}.${EXTENSION}"
  
  #   rename the file
  if [[ "n" == "$SLIDENAME_UNSAVE" ]]; then
    echo "Cancel slide..."
    exit 1
  else
    if [[ -n "$SLIDENAME" ]]; then
      if [[ ! -a "$OUTPUTFILE" ]]; then
        echo "$FILEFULL" "$OUTPUTFILE"
        mv -v "$FILEFULL" "$OUTPUTFILE"
      else
        err "Filename exists: $OUTPUTFILE"
        usage
        exit 1
      fi
    else
      err "No new filename given."
      usage
      exit 1
    fi
  fi
}

# all check?
checkRequirements
checkDependencies

# lets go!
programOutput