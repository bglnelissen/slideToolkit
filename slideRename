#!/bin/bash
#
# Description: Batch rename slides
# 
# The MIT License (MIT)
# Copyright (c) 2014, UMC Utrecht, B.G.L. Nelissen
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

# Variables
SCRIPTNAME=$(basename $0)
DESCRIPTIONSHORT="Batch rename slides"
DEPENDENCIES=("convert" "identify" "display" "parallel" "perl" "tiffinfo")
DEFAULT_RESIZE="512x1024"
DEFAULT_OUTPUT_PREFIX="" # empty by default
DEFAULT_OUTPUT_SUFFIX="" # empty by default
DEFAULT_IM_ARGS="" # imagemagick arguments

# DEBUG setting, remove before going live
# set -o verbose

# Cleanup stage
set -e
function cleanup {
  # kill display like a real man if alive
  if [[ $IM_DISPLAY_PID > 0 ]]; then
    kill $IM_DISPLAY_PID
  fi
  # quit Preview like a polite man if it is still alive.
  if [[ $(ps ux | grep -i [P]review | wc -l) != 0 ]]; then
    osascript -e "ignoring application responses" -e "tell application \"Preview\"" -e "if it is running then" -e "quit with saving" -e "end if" -e "end tell" -e "end ignoring"
  fi
  
  # remove temp files
  rm -rf "$PREVIEW_TMPFILE"
  echo
}
trap cleanup EXIT

# Errors go to stderr
err() {
  echo "ERROR: $@" >&2
}

# usage message
usage() {
cat <<- EOF
usage:
$SCRIPTNAME -f <filename> [options]
Try slideThumb --help for more information.
EOF
}

# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f|--file <filename>        virtual slide to rename
  -l|--layer <integer>        force specific layer by layer id

  [--prefix] <text>             filename prefix
  [--suffix] <text>             filename suffix
  [--to-lower]                  filename output is transformed to lower cases
  [--to-upper]                  filename output is transformed to upper cases
  [--im-display]                use display (imageMagick) to preview slide
  [--convert-args] <arguments>  convert (imageMagick) arguments
  [--resize] <widthxheight>     preview dimentions (${DEFAULT_RESIZE})

  --help                        display this help
  -h                            display this help
  
examples:
  $SCRIPTNAME "file.tif"
  $SCRIPTNAME --prefix="AE" --suffix=".CD68.\${RANDOM}" --file="file.tif"
  $SCRIPTNAME  --layer=5 --convert-args="-threshold 90%" -f "file.tif"

multiple files at once:
     find ./ -iname "*tif" -exec "$(command -v "${SCRIPTNAME}")" --file="{}" \;

dependencies: ${DEPENDENCIES[@]}

This script displays a miniture of the whole slide and asks for a  new
name. The theshold argument can be used to increase the contrast and make
unreadable barcodes readable again, you can use --convert-args="-threshold 90%"
for example. The --convert-args overrides all other arguments that are
already set (like --resize)

The slideToolkit and all its tools are released under the terms of the MIT license
The slideToolkit (C) 2014, UMC Utrecht, B.G.L. Nelissen
Report issues at https://github.com/bglnelissen/slideToolkit/issues

EOF
}

# Menu
# Empty variables
FILE=""
LAYER=""
OUTPUT_PREFIX=""
OUTPUT_SUFFIX=""
RESIZE=""
IM_DISPLAY=""
# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    -h)
    usage
    exit 0 ;;
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    -l | --layer)
      LAYER=$2
      shift 2 ;;
    --layer=*)
      LAYER=${1#*=}
      shift ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    --prefix=*)
      OUTPUT_PREFIX=${1#*=}
      shift ;;
    --suffix=*)
      OUTPUT_SUFFIX=${1#*=}
      shift ;;
    --resize=*)
      RESIZE=${1#*=}
      shift ;;
    --to-upper)
      CASE="CASE_UPPER"
      shift ;;
    --to-lower)
      CASE="CASE_LOWER"
      shift ;;
    --im-display)
      IM_DISPLAY=TRUE
      shift ;;
    --convert-args=*)
      IM_ARGS=${1#*=}
      shift ;;
    --extension=*)
      OUTPUT_EXTENSION=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
# DEFAULTS
# set FILE default
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi
# set OUTPUT_PREFIX default
if [ "$OUTPUT_PREFIX" != "" ]; then
  OUTPUT_PREFIX="$OUTPUT_PREFIX"
else
  OUTPUT_PREFIX="$DEFAULT_OUTPUT_PREFIX"
fi
# set OUTPUT_SUFFIX default
if [ "$OUTPUT_SUFFIX" != "" ]; then
  OUTPUT_SUFFIX="$OUTPUT_SUFFIX"
else
  OUTPUT_SUFFIX="$DEFAULT_OUTPUT_SUFFIX"
fi
# set RESIZE default
if [ "$RESIZE" != "" ]; then
  RESIZE="$RESIZE"
else
  RESIZE="$DEFAULT_RESIZE"
fi
# set IM_ARGS default
if [ "$IM_ARGS" != "" ]; then
  IM_ARGS="$IM_ARGS"
else
  IM_ARGS="$DEFAULT_IM_ARGS"
fi
# set IM_DISPLAY  (this if statement does nothing, as it is set to set in Menu)
if [[ "$IM_DISPLAY" =~ (true|TRUE|YES|yes) ]] ; then
  IM_DISPLAY=true
else
  IM_DISPLAY=false
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    err "No such file: $FILE"
    usage
    exit 1
  fi
  regexresize='^[0-9]*x[0-9]*$' # 1234x4321, but x4132 or 234x must also be possible
  if ! [[ "$RESIZE" =~ $regexresize ]] ; then
    err "This is not a valid --resize option: $RESIZE"
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPS=""
  DEPS_FAIL="0"
  for DEP in ${DEPENDENCIES[@]}; do
    if [[ 0 != "$(command -v "$DEP" >/dev/null ;echo "$?")" ]]; then
       err "Missing dependency: $DEP"
       DEPS_FAIL=$(($DEPS_FAIL + 1))
    fi
  done
  if [[ "$DEPS_FAIL" > 0 ]]; then
    err "Fix missing dependencies (${DEPS_FAIL})"
    usage
    exit 1
  fi
}

# show thumbs per scanner type
getThumbiScanHT(){
  if [ "$LAYER" != "" ]; then
    LAYER="$LAYER"
  else
    LAYER=0
  fi
	# get the thumb
	convert "$FILEFULL[$LAYER]" -filter box -resize "$RESIZE" $IM_ARGS  "$PREVIEW_TMPFILE"
}
getThumbAperio(){
  if [ "$LAYER" != "" ]; then
    convert "$FILEFULL"[$LAYER]  $IM_ARGS -resize "$RESIZE" "$PREVIEW_TMPFILE"
  else
    # the last 2 layers contain thumb and the tissue (couning starts at 0)
    NR_LAYERS=`identify "$FILE" | wc -l`
    N_LABEL="$(($NR_LAYERS - 2))"
    N_TISSUE="$(($NR_LAYERS - 1))"
    # get label, get tissue, rotate and resize both, then concatenate 
    convert "$FILEFULL[$N_LABEL]" $IM_ARGS -resize "$RESIZE" "$PREVIEW_TMPFILE"
  fi
}

programOutput(){
  # set variables
  FILE="$FILE"
  # path variables
  FILEFULL="$(echo "$(cd "$(dirname "$FILE")"; pwd)"/"$(basename "$FILE")")" # full path $FULL
  BASENAME="$(basename "$FILEFULL")"    # basename
  DIRNAME="$(dirname "$FILEFULL")"      # dirname
  EXTENSION="${BASENAME##*.}"           # extension
  FILEPATH="${FILEFULL%.*}"             # full path, no extension
  FILENAME="${BASENAME%.*}"             # filename, no extension"
  # create tmp working file
  PREVIEW_TMPFILE="$(mktemp -q /tmp/${SCRIPTNAME}.XXXXXX)".png
  if [ $? -ne 0 ]; then
       err "$0: Can't create temp file, exiting..."
       exit 1
  fi  
  
  # check metadata for scanner data
  if [[ "0" < "$(tiffinfo  "$FILE" | strings | grep "iScanHT" | wc -l | awk '{print $1}' )" ]]; then
    getThumbiScanHT # iScanHT found
  elif [[ "0" < "$(tiffinfo  "$FILE" | strings | grep "Aperio" | wc -l | awk '{print $1}')" ]]; then
    getThumbAperio  # Aperio found
  else
    err "Unknown virtual slide format: $FILE"
    usage
    exit 1
  fi
  # show file using Preview or display
  if [[ -f "/Applications/Preview.app/Contents/MacOS/Preview" ]] && ! [[ "$IM_DISPLAY" =~ (true|TRUE|YES|yes) ]];then
    open -g -a Preview "$PREVIEW_TMPFILE"
  else 
    display "$PREVIEW_TMPFILE" &
    IM_DISPLAY_PID=$!
  fi

  echo "Current name: $FILENAME"
  echo "Rename your slide. [c to cancel] [ctrl-c to quit]"
  if [[ "" != "$OUTPUT_PREFIX" || "" != "$OUTPUT_SUFFIX" ]]; then
    echo "Prefix: \"$OUTPUT_PREFIX\" Suffix: \"$OUTPUT_SUFFIX\""
  fi
  while [ "$SLIDENAME_UNSAVE" == "" ]; do
    read -p "Enter slide name:" SLIDENAME_UNSAVE
    if [[ "c" == "$SLIDENAME_UNSAVE" ]] || [[ "" == "$SLIDENAME_UNSAVE" ]] ; then
      echo "Cancel slide..."
      exit 1
    fi
  done
  
  SLIDENAME_UNSAVE=$(printf "$SLIDENAME_UNSAVE" | strings | perl -p -e 's/^\[B//g')  # fix barcodescanner output 
  SLIDENAME=$(printf "${OUTPUT_PREFIX}${SLIDENAME_UNSAVE}${OUTPUT_SUFFIX}" | perl -p -e 's/[^A-Za-z0-9._-]/_/g') # printf keeps it all on one line
  SLIDEFILE="${SLIDENAME}.${EXTENSION}"
  # change case if needed
  if [[ "CASE_LOWER" = "$CASE" ]]; then
    # change case to lower case
    SLIDEFILE=$(echo "$SLIDEFILE" | tr [:upper:] [:lower:])
  elif  [[ "CASE_UPPER" = "$CASE" ]]; then
    # change case to upper case
    SLIDEFILE=$(echo "$SLIDEFILE" | tr [:lower:] [:upper:])
  fi
  OUTPUTFILE="${DIRNAME}/${SLIDEFILE}"
  #   rename the file
  if [[ -n "$OUTPUTFILE" ]]; then
    if [[ ! -a "$OUTPUTFILE" ]]; then
      # verbose rename file
      mv -v "$FILEFULL" "$OUTPUTFILE"
    else
      err "Filename exists: $OUTPUTFILE"
      usage
      exit 1
    fi
  else
    err "No new filename given."
    usage
    exit 1
  fi
}

# all check?
checkRequirements
checkDependencies

# lets go!
programOutput