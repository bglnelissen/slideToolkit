#!/bin/bash
#
# Description: Create thumb from virtual slide
# Copyright (C) 2014, B.G.L. Nelissen. All rights reserved.
#
################################################################################
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# 
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
################################################################################
# Respect the Google Shell style guide.
# http://google-styleguide.googlecode.com/svn/trunk/shell.xml

# ToDo automatically find the right layer

# Variables
SCRIPTNAME=$(basename $0)
DESCRIPTIONSHORT="Extract thumbnail from virtual slide"
DEPENDENCIES=("convert parallel perl")

# DEBUG setting, remove before going live
# set -o verbose

# usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME [options] [path/]file
        [--help]
EOF
}
# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=FILE]         extract the thumbnail from this virtual slide
  -l, --layer[=INT]         force specific layer by layer id

  --help                    display this help and exit

examples:
  $SCRIPTNAME "file.tif"
  $SCRIPTNAME  --file="file.tif"

multiple files at once:
  find -L ./  -name '*.tif' | parallel $SCRIPTNAME {}

dependencies: $DEPENDENCIES

Most virtual slides contain a an overview image from each slide, aka
thumbnail. This script does a good job of extracting the correct layer,
but you can always force an extraction using the --layer flag followed
by an integer representing that layer.
Report bugs to <b.g.l.nelissen@gmail.com>
slideToolkit (C) 2014, B.G.L. Nelissen
EOF
}

# Menu
# Empty variables
FILE=""
LAYER=""
# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    -l | --layer)
      LAYER=$2
      shift 2 ;;
    --layer=*)
      LAYER=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
# DEFAULTS
# set FILE default
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi
# set LAYER default
if [ "$LAYER" != "" ]; then
  LAYER="$LAYER"
else
  LAYER=0
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    echo "No such file: $FILE">&2;
    usage
    exit 1
  fi
  regexnumeric='^[0-9]+$'
  if ! [[ $LAYER =~ $regexnumeric ]] ; then
    echo "Layer is not an integer: $LAYER">&2;
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPENDENCIES="$DEPENDENCIES"
  DEPS=""
  for DEP in $DEPENDENCIES; do
    if [[ 0 != $(command -v "$DEP" >/dev/null ;echo $?) ]]; then
      DEPS=$(echo "$DEPS $DEP") # create `array` with unknown dependencies
    fi
  done
  if [[ "" != $(echo "$DEPS" | perl -p -e 's/ //g') ]]; then
    for d in $DEPS; do
      echo "Missing dependency: \"$d\""
    done
    exit 1
  fi
}

# actual program
programOutput(){
	LAYER="$LAYER"
  FILEFULL="$(echo $(cd $(dirname $FILE); pwd)/$(basename $FILE))" # full path $FULL
  BASENAME=$(basename "$FILEFULL")    # basename
  EXTENSION="${BASENAME##*.}"         # extension
  FILEPATH="${FILEFULL%.*}"           # full path, no extension
  FILENAME="${BASENAME%.*}"           # filename, no extension"
	
	# get the thumb
	convert "$FILEFULL"[$LAYER] "$FILEPATH"."$LAYER".thumb.png
}

# all check?
checkRequirements
checkDependencies

# lets go!
programOutput
