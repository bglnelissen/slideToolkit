#!/bin/bash
#
# Description: Create thumb from virtual slide
# Copyright (C) 2014, B.G.L. Nelissen. All rights reserved.
#
################################################################################
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# 
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
################################################################################
# Respect the Google Shell style guide.
# http://google-styleguide.googlecode.com/svn/trunk/shell.xml

# Variables
SCRIPTNAME=$(basename $0)
DESCRIPTIONSHORT="Extract thumbnail from virtual slide"
DEPENDENCIES=("convert" "parallel" "perl")
DEFAULT_OUTPUT_SUFFIX=".thumb"
DEFAULT_OUTPUT_EXTENSION="png"
WIDTH="512"

# DEBUG setting, remove before going live
# set -o verbose

# Errors go to stderr
err() {
  echo "ERROR: $@" >&2
}
# usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME [options] [path/]file
        [--help]
EOF
}

# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=FILE]         extract the thumbnail from this virtual slide
  -l, --layer[=INT]         force specific layer by layer id
  --suffix[=TEXT]           suffix to filename (default: $DEFAULT_OUTPUT_SUFFIX)
  --extension[=TEXT]        thumbnail output extension (default: $DEFAULT_OUTPUT_EXTENSION)
  
  --help                    display this help and exit

examples:
  $SCRIPTNAME "file.svs"
  $SCRIPTNAME  --layer=5 --suffix=".suffix" --extension="jpg" "file.tif"

multiple files at once:
  find -L ./ -name "*svs" -o -name "*tif" | parallel $SCRIPTNAME {}

dependencies: ${DEPENDENCIES[@]}

A virtual slide is usually variant of a multilayered/pyramid TIFF file.
Different vendors store an overview of each slide in one (or more) of
these layers. This script extracts the correct layers and resizes,
rotates and concatenates when necessary. 
Report bugs to <b.g.l.nelissen@gmail.com>
slideToolkit (C) 2014, B.G.L. Nelissen
EOF
}

# Menu
# Empty variables
FILE=""
LAYER=""
OUTPUT_SUFFIX=""
OUTPUT_EXTENSION=""
# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    -l | --layer)
      LAYER=$2
      shift 2 ;;
    --layer=*)
      LAYER=${1#*=}
      shift ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    --suffix=*)
      OUTPUT_SUFFIX=${1#*=}
      shift ;;
    --extension=*)
      OUTPUT_EXTENSION=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
# DEFAULTS
# set FILE default
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi
# set OUTPUT_SUFFIX default
if [ "$OUTPUT_SUFFIX" != "" ]; then
  OUTPUT_SUFFIX="$OUTPUT_SUFFIX"
else
  OUTPUT_SUFFIX="$DEFAULT_OUTPUT_SUFFIX"
fi
# set OUTPUT_EXTENSION default
if [ "$OUTPUT_EXTENSION" != "" ]; then
  OUTPUT_EXTENSION="$OUTPUT_EXTENSION"
else
  OUTPUT_EXTENSION="$DEFAULT_OUTPUT_EXTENSION"
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    err "No such file: $FILE"
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPS=""
  DEPS_FAIL="0"
  for DEP in "${DEPENDENCIES[@]}"; do
    if [[ 0 != "$(command -v "$DEP" >/dev/null ;echo "$?")" ]]; then
       err "Missing dependency: $DEP"
       DEPS_FAIL=$(($DEPS_FAIL + 1))
    fi
  done
  if [[ "$DEPS_FAIL" > 0 ]]; then
    err "Fix missing dependencies (${DEPS_FAIL})"
    usage
    exit 1
  fi
}

# get thumb for each scanner type
getThumbiScanHT(){
  if [ "$LAYER" != "" ]; then
    LAYER="$LAYER"
  else
    # layer 0 contains the thumb
    LAYER=0
  fi
	convert "$FILEFULL[$LAYER]" "$OUTPUTFILENAME"
}
getThumbAperio(){
  if [ "$LAYER" != "" ]; then
    convert "$FILEFULL"[$LAYER] "$OUTPUTFILENAME"
  else
    # the last 2 layers contain thumb and the tissue (couning starts at 0)
    NR_LAYERS=`identify "$FILE" | wc -l`
    N_LABEL="$(($NR_LAYERS - 2))"
    N_TISSUE="$(($NR_LAYERS - 1))"
    # get label, get tissue, rotate one and resize both, then append 
    convert "$FILEFULL[$N_LABEL]" -resize "$WIDTH"x \( "$FILEFULL[$N_TISSUE]" -rotate 90 -resize "$WIDTH"x \) -append "$OUTPUTFILENAME"
  fi
}

programOutput(){
  # set variables
  FILE="$FILE"
  # path variables
  FILEFULL="$(echo "$(cd "$(dirname "$FILE")"; pwd)"/"$(basename "$FILE")")" # full path $FULL
  BASENAME="$(basename "$FILEFULL")"    # basename
  DIRNAME="$(dirname "$FILE")"          # dirname
  EXTENSION="${BASENAME##*.}"           # extension
  FILEPATH="${FILEFULL%.*}"             # full path, no extension
  FILENAME="${BASENAME%.*}"             # filename, no extension"
  OUTPUTFILENAME="${FILEPATH}${OUTPUT_SUFFIX}.${OUTPUT_EXTENSION}"
  
  # check metadata for scanner data
  if [[ "0" < "$(tiffinfo  "$FILE" | strings | grep "iScanHT" | wc -l)" ]]; then
    getThumbiScanHT # iScanHT found
  elif [[ "0" < "$(tiffinfo  "$FILE" | strings | grep "Aperio" | wc -l)" ]]; then
    getThumbAperio  # Aperio found
  else
    err "Unknown virtual slide format: $FILE"
    usage
    exit 1
  fi
}

# all check?
checkRequirements
checkDependencies

# lets go!
programOutput
