#!/bin/bash

### Creating display functions
### Setting colouring
NONE='\033[00m'
BOLD='\033[1m'
ITALIC='\033[3m'
OPAQUE='\033[2m'
FLASHING='\033[5m'
UNDERLINE='\033[4m'

RED='\033[01;31m'
GREEN='\033[01;32m'
YELLOW='\033[01;33m'
PURPLE='\033[01;35m'
CYAN='\033[01;36m'
WHITE='\033[01;37m'
### Regarding changing the 'type' of the things printed with 'echo'
### Refer to: 
### - http://askubuntu.com/questions/528928/how-to-do-underline-bold-italic-strikethrough-color-background-and-size-i
### - http://misc.flogisoft.com/bash/tip_colors_and_formatting
### - http://unix.stackexchange.com/questions/37260/change-font-in-echo-command

### echo -e "\033[1mbold\033[0m"
### echo -e "\033[3mitalic\033[0m" ### THIS DOESN'T WORK ON MAC!
### echo -e "\033[4munderline\033[0m"
### echo -e "\033[9mstrikethrough\033[0m"
### echo -e "\033[31mHello World\033[0m"
### echo -e "\x1B[31mHello World\033[0m"

function echobold { #'echobold' is the function name
    echo -e "${BOLD}${1}${NONE}" # this is whatever the function needs to execute, note ${1} is the text for echo
}
function echoitalic { 
    echo -e "${ITALIC}${1}${NONE}" 
}
function echocyan { 
    echo -e "${CYAN}${1}${NONE}" 
}

function echonooption { 
    echo -e "${OPAQUE}${RED}${1}${NONE}"
}

# errors
function echoerrorflash { 
    echo -e "${RED}${BOLD}${FLASHING}${1}${NONE}" 
}
function echoerror { 
    echo -e "${RED}${1}${NONE}"
}

# errors no option
function echoerrornooption { 
    echo -e "${YELLOW}${1}${NONE}"
}
function echoerrorflashnooption { 
    echo -e "${YELLOW}${BOLD}${FLASHING}${1}${NONE}"
}

### MESSAGE FUNCTIONS
script_copyright_message() {
	echo ""
	THISYEAR=$(date +'%Y')
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	echo "+ The MIT License (MIT)                                                                                 +"
	echo "+ Copyright (c) 2016-${THISYEAR} Sander W. van der Laan                                                        +"
	echo "+                                                                                                       +"
	echo "+ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and     +"
	echo "+ associated documentation files (the \"Software\"), to deal in the Software without restriction,         +"
	echo "+ including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, +"
	echo "+ and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, +"
	echo "+ subject to the following conditions:                                                                  +"
	echo "+                                                                                                       +"
	echo "+ The above copyright notice and this permission notice shall be included in all copies or substantial  +"
	echo "+ portions of the Software.                                                                             +"
	echo "+                                                                                                       +"
	echo "+ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT     +"
	echo "+ NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                +"
	echo "+ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES  +"
	echo "+ OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN   +"
	echo "+ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                            +"
	echo "+                                                                                                       +"
	echo "+ Reference: http://opensource.org.                                                                     +"
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
}
script_arguments_error() {
	echoerror "$1" # ERROR MESSAGE
	echoerror "- Argument #1  -- name of the file containing images to collect, e.g. 20190721.ExpressScan.QC.FIBRIN.top20.largest.countobjects.txt, where the first column contains the samplenumber."
	echoerror "- Argument #2  -- path_to working directory, i.e. where all the image-subdirectories are."
	echoerror "- Argument #3  -- name of the stain."
	echoerror "- Argument #4  -- starting letters/characters of the image-subdirectories, e.g. IMG or AE or AAA."
	echoerror ""
	echoerror "An example command would be: slideCollector [arg1: FILE] [arg2: IMAGEDIR] [arg3: STAIN] [arg3: SUBDIRNAME] "
	echoerror "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  	# The wrong arguments are passed, so we'll exit the script now!
  	exit 1
}

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echobold "                               slideCollector"
echo ""
echoitalic "* Written by  : Sander W. van der Laan; Tim Bezemer; Tim van de Kerkhof"
echoitalic "* E-mail      : s.w.vanderlaan-2@umcutrecht.nl"
echoitalic "* Last update : 2019-07-25"
echoitalic "* Version     : 1.0.0"
echo ""
echoitalic "* Description : This script will collect images based on an arbitrary list."
echoitalic "                "
echo ""
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

echo ""
### REQUIRED | GENERALS	
FILENAME="$1" # Depends on arg1
PROJECTDIR="$2" # Depends on arg3
STAIN="$3" # Depends on arg4
FILESTART="$4" # Depends on arg4

# Set slideToolKit DIRECTORY
SLIDETOOLKITDIR="/hpc/local/CentOS7/dhl_ec/software/slideToolKit"

### START of if-else statement for the number of command-line arguments passed ###
if [[ $# -lt 1 ]]; then 
	echo "Oh, computer says no! Number of arguments found \"$#\"."
	script_arguments_error "You must supply correct (number of) arguments when running *** slideCollector ***!"
		
else

echo ""
echobold "Reading [ "$FILENAME" ] and collecting relevant samples."
while IFS='' read -r SAMPLEOFINTEREST || [[ -n "$SAMPLEOFINTEREST" ]]; do
	### EXAMPLE VARIANT LIST
	### StudyNumber ImageType TotalSTAINTissue TotalTissue TotalSTAINTissueCount TotalTissueCounts PercentageSTAIN RatioSTAIN CountObjectsSTAIN
	### 1110 TIF 75776173.5344423 134013790.848719 15398583 7078 56.5435639530429 0.565435639530429 2175.55566544222
	### 1140 TIF 50992299.447722 81524147.3481138 23205297 6201 62.5487062501633 0.625487062501633 3742.1862602806

	LINE=${SAMPLEOFINTEREST}
	SAMPLENUMBER=$(echo "${LINE}" | awk '{ print $1 }')
	VARIANTFORFILE=$(echo "${LINE}" | awk '{ print $1 }')
	IMAGETYPE=$(echo "${LINE}" | awk '{ print $2 }')
			
	OUTPUTDIR=$(basename "$FILENAME" .txt)
	
	echo ""
	echoitalic "Making the output directory [ "$OUTPUTDIR" ] and necessary subfolder(s)."
	mkdir -v "$OUTPUTDIR"
	mkdir -v "$OUTPUTDIR"/counted
	COUNTDIR="$OUTPUTDIR"/counted
	
	echo ""
	echoitalic "Copying macro and masks."
	cp -v "$PROJECTDIR"/${SUBDIRNAME}${SAMPLENUMBER}*.png "$OUTPUTDIR"/
	
	echo ""
	echoitalic "Copying macro and masks."
	cp -v "$PROJECTDIR"/${SUBDIRNAME}${SAMPLENUMBER}*/cp_output/*.png "$COUNTDIR"/
	
done < ${FILENAME}
			


### END of if-else statement for the number of command-line arguments passed ###
fi

script_copyright_message