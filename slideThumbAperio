#!/bin/bash
#
# Description: Create thumb from virtual slide
# Copyright (C) 2014, B.G.L. Nelissen. All rights reserved.
#
################################################################################
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# 
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
################################################################################
# Respect the Google Shell style guide.
# http://google-styleguide.googlecode.com/svn/trunk/shell.xml

# ToDo automatically find the right layer

# Variables
SCRIPTNAME=$(basename $0)
DESCRIPTIONSHORT="Extract thumbnail from virtual Aperio slide"
DEPENDENCIES=("convert parallel")
OUTPUT_EXTENSION="png"
WIDTH="512"

# DEBUG setting, remove before going live
# set -o verbose

# usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME [options] [path/]file
        [--help]
EOF
}
# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=FILE]         extract the thumbnail from this virtual slide

  --help                    display this help and exit

examples:
  $SCRIPTNAME "file.svs"
  $SCRIPTNAME  --file="file.svs"

multiple files at once:
  find -L ./  -name '*.svs' | parallel $SCRIPTNAME {}

dependencies: $DEPENDENCIES

Aperio slides are a variant of a multilayered/pyramid TIFF file. The
last 2 layers contain an image of the label and the scanned area
respectively. This script extract these two layers, resizes and rotates
them acordingly and concatenates them into one file.
Report bugs to <b.g.l.nelissen@gmail.com>
slideToolkit (C) 2014, B.G.L. Nelissen
EOF
}

# Menu
# Empty variables
FILE=""
# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
# DEFAULTS
# set FILE default
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    echo "No such file: $FILE">&2;
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPENDENCIES="$DEPENDENCIES"
  DEPS=""
  for DEP in $DEPENDENCIES; do
    if [[ 0 != $(command -v "$DEP" >/dev/null ;echo $?) ]]; then
      DEPS=$(echo "$DEPS $DEP") # create `array` with unknown dependencies
    fi
  done
  if [[ "" != $(echo "$DEPS" | perl -p -e 's/ //g') ]]; then
    for d in $DEPS; do
      echo "Missing dependency: \"$d\""
    done
    exit 1
  fi
}

# actual program
programOutput(){
  # set variables
  FILE="$FILE"
  # path variables
  FILEFULL="$(echo $(cd $(dirname $FILE); pwd)/$(basename $FILE))" # full path $FULL
  BASENAME="$(basename "$FILEFULL")"    # basename
  DIRNAME="$(dirname "$FILE")"          # dirname
  EXTENSION="${BASENAME##*.}"           # extension
  FILEPATH="${FILEFULL%.*}"             # full path, no extension
  FILENAME="${BASENAME%.*}"             # filename, no extension"
  
  # the last 2 layers contain thumb and the tissue (couning starts at 0)
  NR_LAYERS=`identify "$FILE" | wc -l`
  N_LABEL="$(($NR_LAYERS - 2))"
  N_TISSUE="$(($NR_LAYERS - 1))"
  # echo "N_LABEL $N_LABEL"
  # echo "N_TISSUE $N_TISSUE"
  # echo  "${FILEPATH}.${OUTPUT_EXTENSION}"
  
  # get label, get tissue, rotate and resize both, then concatenate 
  convert "$FILEFULL[$N_LABEL]" -resize "$WIDTH"x \( "$FILEFULL[$N_TISSUE]" -rotate 90 -resize "$WIDTH"x \) -append "${FILEPATH}.${OUTPUT_EXTENSION}"
}

# all check?
checkRequirements
checkDependencies

# lets go!
programOutput
