#!/bin/bash
#
#Description: Extract SQL-file column headers created by cellprofiler
#Copyright (C) 2014, B.G.L. Nelissen. All rights reserved.
##
##################################################################################
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are
#met:
#
#  Redistributions of source code must retain the above copyright
#notice,
#  this list of conditions and the following disclaimer.
#
#  Redistributions in binary form must reproduce the above copyright
#  notice, this list of conditions and the following disclaimer in the
#  documentation and/or other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#################################################################################
#Respect the Google Shell style guide.
#http://google-styleguide.googlecode.com/svn/trunk/shell.xml
#
#Variables
SCRIPTNAME=$(basename $0)
DESCRIPTIONSHORT="Extract SQL-file column names created by cellprofiler"
SUFFIX=".head"

#usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME [options] [path/]file
        [--help]
EOF
}

#Errors go to stderr
err() {
  echo "ERROR: $@" >&2
  usage
}

#help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=FILE]         "SQL_SETUP.SQL" file 
      --add-head[=FILE]     "file.csv" file 

  --help                    display this help and exit

examples:
  $SCRIPTNAME "SQL_SETUP.SQL"
  $SCRIPTNAME  --file="SQL_SETUP.SQL" --add-head="file.csv"

Extract SQL-file column names created by cellprofiler. These headers
can be added to a .csv file using the --add-head option, a copy
(.head.csv) will be created
Report issues at https://github.com/bglnelissen/slideToolkit/issues
slideToolkit (C) 2014, B.G.L. Nelissen
EOF
}
#Menu
#Empty variables
FILE=""
ADDHEAD=""
#illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
#loop through options
while :
do
  case $1 in
    -h | --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    --add-head=*)
      ADDHEAD=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done
#DEFAULTS
#set FILE
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi

#requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    err "No such file: $FILE">&2;
    exit 1
  fi
  if ! [[ -z "$ADDHEAD" ]]; then
    if ! [[ -f "$ADDHEAD" ]] ; then
      err "No such file: $ADDHEAD">&2;
      exit 1
    fi  
  fi
}

# actual program
programOutput(){
  # convert to 1 line
  # sed 'CREATE TABLE Per_Image' '))'; remove data types; clean spaces and comma's
  HEAD=$(cat "$FILE" | tr '\n' ' ' \
  | sed 's/.*CREATE\ TABLE\ Per_Image\ (\(.*\)PRIMARY\ KEY\ (ImageNumber)\ ).*/\1/' \
  | sed 's/float//g' | sed 's/INTEGER//g' | sed 's/TEXT//g' \
  | sed 's/\ \,\ /\,\ /g' | sed 's/\.*,\ $//' | sed 's/^\ //')
  # add head, yes -> do it, no -> echo head to stdout
  if ! [[ -z "$ADDHEAD" ]]; then
    echo "$(echo $HEAD; cat $ADDHEAD)" > "${ADDHEAD%.*}${SUFFIX}.${ADDHEAD##*.}"
  else
    echo "$HEAD"
  fi
}
#all check?
checkRequirements

#lets go!
programOutput