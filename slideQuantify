#!/bin/bash
rm -rf logs/
rm -rf errors/
mkdir -p logs
mkdir -p errors
rm -rf AE*/magick-tmp
ENTROPY_THRESHOLD=210
STAIN=$1
PIPELINE=$2
if [ ! -f $2 ]; then echo "No such file (CP protocol)!"; exit 1; fi;
if [ "$STAIN" = "" ]; then echo "Please specify Stain name!"; exit; fi;
HOLD_JIDS=()
INDEX=0
BATCH_SIZE=3000
UNIQUE_LABEL="V3"

for AE_NUM in AE*/
do
	sleep 1
	THIS_AE=${AE_NUM/\//}
	THIS_SLIDEMASK=${THIS_AE}_slideMask_${UNIQUE_LABEL}
	THIS_SLIDE2TILES=${THIS_AE}_slide2Tiles_${UNIQUE_LABEL}
	THIS_SLIDENORMALIZE=${THIS_AE}_slideNormalize_${UNIQUE_LABEL}
	THIS_CELLPROFILER=${THIS_AE}_CellProfiler_${UNIQUE_LABEL}
	THIS_WRAPUP=${THIS_AE}_WrapUp_${UNIQUE_LABEL}

	HOLD_JID_INDEX=`expr $INDEX % $BATCH_SIZE`

	if [ "$INDEX" -lt "$BATCH_SIZE" ]; then
		HOLD_JID_STRING=""
	else
		HOLD_JID_STRING=""
	fi
	HOLD_JIDS[$HOLD_JID_INDEX]=$THIS_CELLPROFILER
	
	cd $AE_NUM
	echo "Processing $THIS_AE"
	
	if [ -f result.txt ]; then cd ..; INDEX=$((INDEX+1)); echo "....Already done!"; continue; fi;

	#slideEMask for macro, and NDPISplit when necessary
	echo "#if [ -f *mask.png ]; then exit; fi;
	module load slideToolkit
	module load ndpitools
	mkdir -vp magick-tmp
        export MAGICK_TMPDIR=$(pwd)/magick-tmp
        export TMPDIR=$(pwd)/magick-tmp
	if [ -f *.ndpi ]; then
		if [ -f *.ndpi ]; then  ndpisplit -x40 -z0 *.ndpi; fi
		slideMask --layer 0 -f *.tif;
	else
		slideMask --layer 3 -f *.TIF
	fi
	slideEMask -f *macro.png -t $ENTROPY_THRESHOLD
	rm -rfv magick-tmp
	" | qsub -cwd -N $THIS_SLIDEMASK -e ../errors/ -o ../logs/ $HOLD_JID_STRING -l h_vmem=100G -l h_rt=01:30:00
	echo $THIS_SLIDEMASK
	echo $HOLD_JID_STRING
	
	#slide2Tiles
	echo "if [ -d *.tiles ]; then exit; fi;
	module load ndpitools;
	module load slideToolkit;
	mkdir -p magick-tmp
	export MAGICK_TMPDIR=$(pwd)/magick-tmp
	export TMPDIR=$(pwd)/magick-tmp

	if [ -f *.ndpi ]; then

		slide2Tiles --layer 0 -f *x40*.tif -m *emask.png
	else
		slide2Tiles --layer 3 -f *.TIF -m *.emask.png
	fi

	rm -rf magick-tmp
	" | qsub -cwd -N $THIS_SLIDE2TILES -e ../errors/ -o ../logs/ -hold_jid $THIS_SLIDEMASK -l h_vmem=150G -l h_rt=02:30:00

	#slideNormalize
	echo "if [ -f processanda.txt ]; then exit; fi;
	if [ ! -d *.tiles ]; then
		(>&2 echo "Error! No tiles to process")
		exit; 
	fi
	cd *.tiles/;
	module load slideNormalize;
	module load slideToolkit;
	mkdir -vp magick-tmp
		export MAGICK_TMPDIR=$(pwd)/magick-tmp
		export TMPDIR=$(pwd)/magick-tmp
	for f in *.png
	do
		echo \"...Processing tile \$f\";
		slideNormalize \$f;
		slideEMask -c -f \$f -t $ENTROPY_THRESHOLD
		rm \$f;
	done
	rm -rf magick-tmp
	cd ..
	ls -d -1 \$PWD/*tiles/*normalized* > processanda.txt;
	ls -d -1 \$PWD/*tiles/ENTROPY* >> processanda.txt;
	" | qsub -cwd -N $THIS_SLIDENORMALIZE -e ../errors/ -o ../logs/ -hold_jid $THIS_SLIDE2TILES -l h_vmem=5G -l h_rt=02:00:00
	
	#CellProfiler
	echo "if [ -d cp_output ]; then exit; fi;
	module load anaconda
	mkdir -vp cp_output
	cellprofiler -c -r -p $PIPELINE --file-list processanda.txt -o cp_output/;
	" | qsub -cwd -N $THIS_CELLPROFILER -e ../errors/ -o ../logs/ -hold_jid $THIS_SLIDENORMALIZE -l h_vmem=25G -l h_rt=03:00:00

	#REMOVE THIS BREAK FOR PRODUCTION!
	INDEX=$((INDEX+1))
# 	break;	
	
	#Wrap Up
	echo "
	ls cp_output/*.png | shuf -n \$(expr \$(ls cp_output/*.png | wc -l) - 10) | xargs rm;
	echo 'AE_NUM $STAIN' > result.txt;
	cd cp_output;
	AE_NUM=\$(basename \"$PWD\") | cut -d'.' -f1
	echo \$AE_NUM \$(Rscript ..\/Colsums.R $STAIN) >> ../result.txt;
	cd ..
	rm -rfv *tiles/;
	if [ -f *.ndpi ]; then rm *x40*.tif; rm *x40*.png; fi;
		rm -v processanda.txt;
	" | qsub -cwd -N $THIS_WRAPUP -e ../errors/ -o ../logs/ -hold_jid $THIS_CELLPROFILER

	cd ..

	INDEX=$((INDEX+1))
	if [ "$INDEX" -eq "3000" ]; then break; fi;
done

