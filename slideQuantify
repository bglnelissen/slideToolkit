#!/bin/bash

### Creating display functions
### Setting colouring
NONE='\033[00m'
BOLD='\033[1m'
ITALIC='\033[3m'
OPAQUE='\033[2m'
FLASHING='\033[5m'
UNDERLINE='\033[4m'

RED='\033[01;31m'
GREEN='\033[01;32m'
YELLOW='\033[01;33m'
PURPLE='\033[01;35m'
CYAN='\033[01;36m'
WHITE='\033[01;37m'
### Regarding changing the 'type' of the things printed with 'echo'
### Refer to: 
### - http://askubuntu.com/questions/528928/how-to-do-underline-bold-italic-strikethrough-color-background-and-size-i
### - http://misc.flogisoft.com/bash/tip_colors_and_formatting
### - http://unix.stackexchange.com/questions/37260/change-font-in-echo-command

### echo -e "\033[1mbold\033[0m"
### echo -e "\033[3mitalic\033[0m" ### THIS DOESN'T WORK ON MAC!
### echo -e "\033[4munderline\033[0m"
### echo -e "\033[9mstrikethrough\033[0m"
### echo -e "\033[31mHello World\033[0m"
### echo -e "\x1B[31mHello World\033[0m"

function echobold { #'echobold' is the function name
    echo -e "${BOLD}${1}${NONE}" # this is whatever the function needs to execute, note ${1} is the text for echo
}
function echoitalic { 
    echo -e "${ITALIC}${1}${NONE}" 
}
function echocyan { 
    echo -e "${CYAN}${1}${NONE}" 
}

function echonooption { 
    echo -e "${OPAQUE}${RED}${1}${NONE}"
}

# errors
function echoerrorflash { 
    echo -e "${RED}${BOLD}${FLASHING}${1}${NONE}" 
}
function echoerror { 
    echo -e "${RED}${1}${NONE}"
}

# errors no option
function echoerrornooption { 
    echo -e "${YELLOW}${1}${NONE}"
}
function echoerrorflashnooption { 
    echo -e "${YELLOW}${BOLD}${FLASHING}${1}${NONE}"
}

### MESSAGE FUNCTIONS
script_copyright_message() {
	echo ""
	THISYEAR=$(date +'%Y')
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	echo "+ The MIT License (MIT)                                                                                 +"
	echo "+ Copyright (c) 2016-${THISYEAR} Sander W. van der Laan                                                        +"
	echo "+                                                                                                       +"
	echo "+ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and     +"
	echo "+ associated documentation files (the \"Software\"), to deal in the Software without restriction,         +"
	echo "+ including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, +"
	echo "+ and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, +"
	echo "+ subject to the following conditions:                                                                  +"
	echo "+                                                                                                       +"
	echo "+ The above copyright notice and this permission notice shall be included in all copies or substantial  +"
	echo "+ portions of the Software.                                                                             +"
	echo "+                                                                                                       +"
	echo "+ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT     +"
	echo "+ NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                +"
	echo "+ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES  +"
	echo "+ OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN   +"
	echo "+ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                            +"
	echo "+                                                                                                       +"
	echo "+ Reference: http://opensource.org.                                                                     +"
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
}
script_arguments_error() {
	echoerror "$1" # ERROR MESSAGE
	echoerror "- Argument #1  -- name of the stain as it appears in the filenames, e.g. FIBRIN."
	echoerror "- Argument #2  -- path_to CellProfiler pipeline, e.g. FIBRIN.cppipe."
	echoerror "- Argument #3  -- path_to working directory, i.e. where all the image-subdirectories are."
	echoerror "- Argument #4  -- starting letters/characters of the image-subdirectories, e.g. IMG or AE or AAA."
	echoerror "- Argument #5  -- output filename where the CellProfiler results are stored, e.g. Image.csv (delimiter is assumed '_')."
	echoerror "- Argument #6  -- email address to send aborted/error jobs too, e.g. y.name@umcutrecht.nl."
	echoerror "- Argument #7  -- by default emails are send when jobs are aborted/error, you can change that here, e.g. you can choose: BEGIN=begin of job; END=end of job; FAIL=abort of job; ALL=all message job; NONE=no mail is send."
	echoerror "- Argument #8  -- eMask threshold. A smaller number is less stringent, best results are obtained using, e.g. '210'."
	echoerror "- Argument #9  -- Unique label. A string-number combination (no spaces) for reference to the analysis run. [OPTIONAL]"
	echoerror "- Argument #10  -- Batch size. A number to indicate the batch size, e.g. '5000'. [OPTIONAL]"
	echoerror "- Argument #11  -- Random sample. A number to indicate the number of overlay-images after analysis to keep, e.g. '20'. [OPTIONAL]"
	echoerror ""
	echoerror "An example command would be: slideQuantify [arg1: STAIN] [arg2: path_to_cellprofiler_pipeline] [arg3: path_to_working_directory] [arg4: IMG or AE or AAA] [arg5: Image.txt] [arg6: y.name@umcutrecht.nl] [arg7: a] [arg8: 210]"
	echoerror ""
	echoerror "Please note that this command should be run within the working directory (Argument #3)."
	echoerror "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  	# The wrong arguments are passed, so we'll exit the script now!
  	exit 1
}

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echobold "                               slideQuantify"
echo ""
echoitalic "* Written by  : Sander W. van der Laan; Tim Bezemer; Tim van de Kerkhof"
echoitalic "                Yipei Song"
echoitalic "* E-mail      : s.w.vanderlaan-2@umcutrecht.nl"
echoitalic "* Last update : 2021-09-02"
echoitalic "* Version     : 2.0.3"
echo ""
echoitalic "* Description : This script will start the quantification for a given stain"
echoitalic "                in a given project directory. "
echoitalic "                This is SLURM based."
echo ""
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

echo ""
### REQUIRED | GENERALS	
STAIN="$1" # Depends on arg1
PIPELINE="$2" # Depends on arg2
PROJECTDIR="$3" # Depends on arg3
FILESTART="$4" # Depends on arg4
OUTPUTFILENAME="$5" # Depends on arg5
EMAIL="$6" # Depends on arg6
MAILSETTING="$7" # Depends on arg7
EMASKTHRESHOLD="$8" # Depends on arg8

### OPTIONAL | GENERALS	 
### https://stackoverflow.com/questions/9332802/how-to-write-a-bash-script-that-takes-optional-input-arguments
UNIQUE_LABEL=${9-V1} # Depends on arg9
BATCH_SIZE=${10-5000} # Depends on arg10
RANDOM_SAMPLE=${11-50} # Depends on arg11

QJOB_MEM_SLIDEMASK="100G"
QJOB_TIME_SLIDEMASK="02:30:00"

QJOB_MEM_SLIDE2TILES="150G"
QJOB_TIME_SLIDE2TILES="04:30:00"

QJOB_MEM_SLIDENORM="5G"
QJOB_TIME_SLIDENORM="02:00:00"

QJOB_MEM_CP="10G"
QJOB_TIME_CP="09:00:00"

# Set slideToolKit DIRECTORY
SLIDETOOLKITDIR="/hpc/local/CentOS7/dhl_ec/software/slideToolKit"

### START of if-else statement for the number of command-line arguments passed ###
if [[ $# -lt 8 ]]; then 
	echo "Oh, computer says no! Number of arguments found \"$#\"."
	script_arguments_error "You must supply correct (number of) arguments when running *** slideQuantify ***!"
		
else
	echobold "Cleaning up house, first."
	mkdir -pv "$PROJECTDIR"/logs
	mkdir -pv "$PROJECTDIR"/errors
	rm -rfv "$FILESTART"*/magick-tmp

	ENTROPY_THRESHOLD="$EMASKTHRESHOLD" 
	HOLD_JIDS=()
	INDEX=0
# 	BATCH_SIZE=5000 # should be argument, but how exactly does this work?
# 	UNIQUE_LABEL="V3" # should be argument
	
	cd $PROJECTDIR
	
	### FOR DEBUG
	### echocyan "Debug mode - processing debug-images."
	### DEBUGLIST="AE1088.UMC.CD3_CD56_NKT"
	### DEBUGLIST="AE1088.UMC.CD3_CD56_NKT AE2292.UMC.CD3_CD56_NKT AE861.UMC.CD3_CD56_NKT AE3892.UMC.CD3_CD56_NKT"
	### for SLIDE_NUM in $DEBUGLIST; do
	for SLIDE_NUM in "$FILESTART"*; do
		sleep 1
		THIS_SLIDE=${SLIDE_NUM/\//}
		THIS_SLIDEMASK=${THIS_SLIDE}_slideMask_${UNIQUE_LABEL}
		THIS_SLIDE2TILES=${THIS_SLIDE}_slide2Tiles_${UNIQUE_LABEL}
		THIS_SLIDENORMALIZE=${THIS_SLIDE}_slideNormalize_${UNIQUE_LABEL}
		THIS_CELLPROFILER=${THIS_SLIDE}_CellProfiler_${UNIQUE_LABEL}
		THIS_WRAPUP=${THIS_SLIDE}_WrapUp_${UNIQUE_LABEL}

		HOLD_JID_INDEX=$(expr ${INDEX} % ${BATCH_SIZE})

		# process batches in smaller chunks
		if [ "$INDEX" -lt "$BATCH_SIZE" ]; then
			HOLD_JID_STRING=""
		else
			HOLD_JID_STRING="-hold_jid ${HOLD_JIDS[$HOLD_JID_INDEX]}"
		fi
		HOLD_JIDS[$HOLD_JID_INDEX]=$THIS_CELLPROFILER

		echobold "Processing images of file [ ${SLIDE_NUM} ] in directory [ ${PROJECTDIR} ] for staining [ ${STAIN} ] -- at index [ ${INDEX} ] with total batch size [ ${BATCH_SIZE} ]."	
		cd "$SLIDE_NUM" || exit
		echo ""
	
		# Checking if an analysis was done before
		if [[ -s cp_output/"$STAIN"_Image.csv.gz ]]; then 
			echoitalic "Checking if this file was processed before; cp_output/${STAIN}_Image.csv.gz should be present ....."
			ls -lh cp_output/*.gz
			cd .. ; 
			INDEX=$((INDEX+1)); 
			echo "..... Analysis was already done!"; 
			continue; 
		fi
		
		echo "..... Processing file for the first time. Submitting job for: "
		
		rm -rfv "$PROJECTDIR"/logs/"$SLIDE_NUM"*
		rm -rfv "$PROJECTDIR"/errors/"$SLIDE_NUM"*

		
		### slideEMask for macro, and NDPISplit when necessary
		echo ""
		echoitalic "* slideEMask, which will mask, create a macro, and do NDPISplit when necessary. [ $THIS_SLIDEMASK ]"
	
		JOB_ID_THIS_SLIDEMASK=$(sbatch -J ${THIS_SLIDEMASK} -e ${PROJECTDIR}/errors/slidemask.errors -o ${PROJECTDIR}/logs/slidemask.log ${HOLD_JID_STRING} --mem=${QJOB_MEM_SLIDEMASK} --time=${QJOB_TIME_SLIDEMASK} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --parsable ${SLIDETOOLKITDIR}/slideQuantify_mask.sh ${EMASKTHRESHOLD} )
	
		### FOR DEBUG
		### echocyan "Debug mode - listing slide number and job-id."
		### echo $THIS_SLIDEMASK
		### echo $HOLD_JID_STRING


		### slide2Tiles
		echo ""
		echoitalic "* slide2Tiles to create tiles from images. [ $THIS_SLIDE2TILES ]"
	
		JOB_ID_THIS_SLIDE2TILES=$(sbatch -J ${THIS_SLIDE2TILES} -e ${PROJECTDIR}/errors/slide2tiles.errors -o ${PROJECTDIR}/logs/slide2tiles.log --mem=${QJOB_MEM_SLIDE2TILES} --time=${QJOB_TIME_SLIDE2TILES} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --depend=afterany:$JOB_ID_THIS_SLIDEMASK --parsable ${SLIDETOOLKITDIR}/slideQuantify_tiling.sh)
	

		### slideNormalize
		echo ""
		echoitalic "* slideNormalize for normalization of images. [ $THIS_SLIDENORMALIZE ]"
	
		JOB_ID_THIS_SLIDENORMALIZE=$(sbatch -J ${THIS_SLIDENORMALIZE} -e ${PROJECTDIR}/errors/slidenormalize.errors -o ${PROJECTDIR}/logs/slidenormalize.log  --mem=${QJOB_MEM_SLIDENORM} --time=${QJOB_TIME_SLIDENORM} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --depend=afterany:$JOB_ID_THIS_SLIDE2TILES --parsable ${SLIDETOOLKITDIR}/slideQuantify_normalizing.sh ${EMASKTHRESHOLD} )
	

		### CellProfiler
		echo ""
		echoitalic "* CellProfiler to analyze images. [ $THIS_CELLPROFILER ]"
	
		JOB_ID_THIS_CELLPROFILER=$(sbatch -J ${THIS_CELLPROFILER} -e ${PROJECTDIR}/errors/slidecellprofiler.errors -o ${PROJECTDIR}/logs/slidecellprofiler.log --mem=${QJOB_MEM_CP} --time=${QJOB_TIME_CP} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --depend=afterany:$JOB_ID_THIS_SLIDENORMALIZE --parsable ${SLIDETOOLKITDIR}/slideQuantify_cellprofiler.sh ${PIPELINE} )
		
	
		### Wrap Up
		echo ""
		echoitalic "* WrapUp the work we have done, and clean house. [ $THIS_WRAPUP ]"
	
		JOB_ID_THIS_WRAPUP=$(sbatch -J ${THIS_WRAPUP} -e ${PROJECTDIR}/errors/slidewrapup.errors -o ${PROJECTDIR}/logs/slidewrapup.log --mail-type=${MAILSETTING} --mail-user=${EMAIL} --parsable --depend=afterany:$JOB_ID_THIS_CELLPROFILER ${SLIDETOOLKITDIR}/slideQuantify_wrapup.sh ${STAIN} ${RANDOM_SAMPLE} )
	

		echo ""
		echo "* Moving back to the project directory [$PROJECTDIR]"
		cd $PROJECTDIR
	
		### REMOVE THIS BREAK FOR PRODUCTION!
		### When this break is active, only the first item 
		### in the list of items to be processed will be processed.
		###
		### OLD CODE
		### INDEX=$((INDEX+1))
		### break;	
	
		### NEW CODE
		INDEX=$((INDEX+1))
		if [ "$INDEX" -eq "$BATCH_SIZE" ]; then 
			break; 
		fi
	
	# END OF for-loop
	done


### END of if-else statement for the number of command-line arguments passed ###
fi

script_copyright_message


