#!/bin/bash
#
# Description: Cut virtual slide into tiles
# 
# The MIT License (MIT)
# Copyright (c) 2014, UMC Utrecht, B.G.L. Nelissen
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 

# Variables
SCRIPTNAME="$(basename $0)"
DESCRIPTIONSHORT="Cut virtual slide into tiles"
DEPENDENCIES=("convert" "identify" "parallel" "openslide-write-png") # must exist in PATH
DEFAULTMASKSUFFIX=".mask.png"
DEFAULTLAYER=3 # 3
DEFAULTHEIGHT=2000  # 2000
DEFAULTWIDTH=2000   # 2000
DEFAULTOUTPUTDIRSUFFIX=".tiles"
MINBYTESIZE=100000  # min size in bytes to detect if tissue is present

# TODO automate or remove this
# sets the memory limits for imagemagicks
SLOTS=3
MEMORYLIMIT="$((14 * $SLOTS))GB" # 14 GB per slot (seems good for imageMagick to know...)

# Exit and cleanup
set -e
function cleanup {
  # remove temp files
  rm -rf "$TMPSTORAGE"
}
trap cleanup EXIT

# Errors go to stderr
err() {
  echo "ERROR: $@" >&2
}

# Debug go to stdout
debug() {
  echo "DEBUG $(date +'%Y-%m-%d %H:%M:%S'): $@" >&1 >/dev/null
}

# usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME -f|--file[=FILE]
        [-m|--mask[=FILE]] [--layer[=INT]] [--height[=PIXELS]] [--width[=PIXELS]]
        [--keepEmtpy] [--outputsuffix[=TEXT]]
        [--help]
EOF
}
# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=FILE]         virtual slide to create tiles from
  -m, --mask[=FILE]         black mask for excluding parts of the virtual slide 
  --layer[=INT]             force specific layer [$DEFAULTLAYER]
  --height[=PIXELS]         tile height in pixels [$DEFAULTHEIGHT]
  --width[=PIXELS]          tile width in pixels [$DEFAULTWIDTH]
  --keepEmtpy               do not delete empty tiles when found
  --outputsuffix[=TEXT]     output directory suffix
  --ignore-dependencies     ignores all dependencies
  
  --help                    display this help and exit

examples:
  $SCRIPTNAME "file.tif"
  $SCRIPTNAME  --keepEmtpy=true --mask="file.mask.png" --file="file.tif"

multiple files at once:
  find ./ -iname "*tif" | parallel "\$(command -v "$SCRIPTNAME")" --mask="{.}.mask.png" --file="{}"

HPC qsub job submission:
  for i in \$(find ./ -iname "*tif"); do
    j="\$(echo "\$(cd "\$(dirname "\$i")"; pwd)"/"\$(basename "\$i")")"; \\
    echo "qsub" -pe threaded "$SLOTS" -q veryshort \\
    "$(command -v "$SCRIPTNAME")" --mask="\${j%.*}".mask.png --file="\${j}"
  done

dependencies: ${DEPENDENCIES[@]}

Cut slides into tiles for further processing. Reasonable tile size is
2000 by 2000 pixels (default). Tiles are stored in a folder with suffix
'$DEFAULTOUTPUTDIRSUFFIX' at the same location as the input file. By default
all empty tiles are deleted.

The slideToolkit and all its tools are released under the terms of the MIT license
The slideToolkit (C) 2014, UMC Utrecht, B.G.L. Nelissen
Report issues at https://github.com/bglnelissen/slideToolkit/issues

EOF
}

# Menu
# Empty variables
FILE=""
MASK=""
LAYER=""
KEEPEMPTYTILES=""
# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    --keepEmpty)
      KEEPEMPTYTILES=TRUE
      shift ;;
    -m | --mask)
      MASK=$2
      shift 2 ;;
    --mask=*)
      MASK=${1#*=}
      shift ;;
    --layer=*)
      LAYER=${1#*=}
      shift ;;
    --outputsuffix=*)
      OUTPUTDIRSUFFIX=${1#*=}
      shift ;;
    --height=*)
      HEIGHT=${1#*=}
      shift ;;
    --width=*)
      WIDTH=${1#*=}
      shift ;;
     --ignore-dependencies)
      IGNORE_DEPENDENCIES=TRUE
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done

# DEFAULTS
# set FILE 
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi
# set MASK 
if [ "$MASK" != "" ]; then
  MASK="$MASK"
fi
# set LAYER 
if [ "$LAYER" != "" ]; then
  LAYER="$LAYER"
else
  LAYER="$DEFAULTLAYER"
fi
# set OUTPUTDIRSUFFIX 
if [ "$OUTPUTDIRSUFFIX" != "" ]; then
  OUTPUTDIRSUFFIX="$OUTPUTDIRSUFFIX"
else
  OUTPUTDIRSUFFIX="$DEFAULTOUTPUTDIRSUFFIX"
fi
# set HEIGHT 
if [ "$HEIGHT" != "" ]; then
  HEIGHT="$HEIGHT"
else
  HEIGHT="$DEFAULTHEIGHT"
fi
# set WIDTH 
if [ "$WIDTH" != "" ]; then
  WIDTH="$WIDTH"
else
  WIDTH="$DEFAULTWIDTH"
fi
# set KEEPEMPTYTILES  (this does nothing, as it is set to set in Menu)
if [[ "$KEEPEMPTYTILES" =~ (true|TRUE|YES|yes) ]] ; then
  KEEPEMPTYTILES=true
else
  KEEPEMPTYTILES=false
fi
# set IGNOREDEPENDENCIES (this does nothing, as it is set to set in Menu)
if [[ "$IGNOREDEPENDENCIES" =~ (true|TRUE|YES|yes) ]] ; then
  IGNOREDEPENDENCIES=true
else
  IGNOREDEPENDENCIES=false
fi

# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    err "No such file: $FILE">&2;
    usage
    exit 1
  fi
  if [ "$MASK" != "" ]; then
    if ! [[ -f "$MASK" ]] ; then
      err "No such mask: $MASK">&2;
      usage
      exit 1
    fi
  fi
  regexnumeric='^[0-9]+$'
  if ! [[ "$LAYER" =~ $regexnumeric ]] ; then
    err "Layer is not an integer: $LAYER">&2;
    usage
    exit 1
  fi
  if ! [[ "$HEIGHT" =~ $regexnumeric ]] ; then
    err "Height is not valid: $HEIGHT">&2;
    usage
    exit 1
  fi
  if ! [[ "$WIDTH" =~ $regexnumeric ]] ; then
    err "Width is not valid: $WIDTH">&2;
    usage
    exit 1
  fi

  # check input files
  S="$(echo $(cd $(dirname $FILE); pwd)/$(basename $FILE))" # full path $FILE
  INPUTFILENAME="${S%.*}"             # full path without extension
  OUTPUTDIRNAME="$INPUTFILENAME""$OUTPUTDIRSUFFIX"
  INPUTSCANEXT="${S##*.}"             # input scan extension only
  M="${MASK}"       # input mask
  FILENAMESCAN="${S##*/}"
  SHORTNAME="$(basename $INPUTFILENAME)"
  FILENAMEMASK="${M##*/}"
  TMPSTORAGE="$TMPSTORAGE"                    # CAREFUL THIS FOLDER GETS DELETED! # CAREFUL WITH THIS MOTHERFUCKER
  LAYER="$LAYER"                             # layer 3 is 20x (for Roche scanner)
  TILESWIDTH="$WIDTH"
  TILESHEIGHT="$HEIGHT"
  buffer="${TMPSTORAGE}/${SHORTNAME}.mpc"
  STARTDATE="$(date)"
    
  if ! [[ -f "$S" ]] ; then
    err "No such scan: $S"
    usage
    exit 1
  fi

  if ! [[ "$INPUTSCANEXT" =~ (tif|tiff|TIF|TIFF) ]] ; then
    err "TIF or TIFF extension expected. (case insensitive)"
    err "Extension found: $INPUTSCANEXT"
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPS=""
  DEPS_FAIL="0"
  for DEP in ${DEPENDENCIES[@]}; do
    if [[ 0 != "$(command -v "$DEP" >/dev/null ;echo "$?")" ]]; then
       err "Missing dependency: $DEP"
       DEPS_FAIL=$(($DEPS_FAIL + 1))
    fi
  done
  if [[ "$DEPS_FAIL" > 0 ]]; then
    err "Fix missing dependencies (${DEPS_FAIL})"
    usage
    exit 1
  fi
}

# actual program
createTilesConvert(){
  TMPSTORAGE="$(mktemp -d -t slide2Tiles_XXXXXXXXXXXX)" # -t relative to $TMPDIR, so it should be HPC save...
  debug "Virtual slide: $S"
  dimensionsslide="$(identify -format %w "${S}"["${LAYER}"])"x"$(identify -format %h "${S}"["${LAYER}"])"
  debug "Create buffer [$dimensionsslide]; $buffer"
  date1="$(date +'%s')"
  convert -limit area "${MEMORYLIMIT}" "${S}"["${LAYER}"] \( "${M}" -fuzz 99% -transparent white -scale ${dimensionsslide} -negate \) -composite -fuzz 3% -trim +repage -bordercolor white -border 30x30 +repage "${buffer}"
  date2="$(date +'%s')"
  diff="$(($date2-$date1))"
  debug "Done buffer; $(($diff / 60)) minutes and $(($diff % 60)) seconds"

  date1="$(date +'%s')"
  convert -limit area "${MEMORYLIMIT}" "${buffer}" -scale "$TILESWIDTH"x"$TILESHEIGHT" "${INPUTFILENAME}.bufferexample.png"
  date2="$(date +'%s')"
  diff="$(($date2-$date1))"
  debug "bufferexample.png created; $(($diff / 60)) minutes and $(($diff % 60)) seconds"

  mkdir -p "$OUTPUTDIRNAME" # create output directory
  # create tiles per row, measure dimensions of newly create image
  width="$(identify -format %w ${buffer})"
  height="$(identify -format %h ${buffer})"
  dimensionsbuffer="$width"x"$height"
  limit_w="$(($width / $TILESWIDTH))"
  limit_h="$(($height / $TILESHEIGHT))"

  debug "Dimensions [$dimensionsbuffer]; tile size [${TILESWIDTH}x${TILESHEIGHT}]"
  date1="$(date +'%s')"
  for y in $(seq 0 "$limit_h"); do
    for x in $(seq 0 "$limit_w"); do
      # one tile
      tile="${SHORTNAME}.X${y}.Y${x}.tile.png"
      w="$((x * $TILESWIDTH))"
      h="$((y * $TILESHEIGHT))"
      FILE="${OUTPUTDIRNAME}/${tile}"
      filename="${FILE%.*}" # full path without extension
      convert -limit area "$MEMORYLIMIT" "$buffer" -crop "${TILESWIDTH}x${TILESHEIGHT}+$w+$h" +repage "$FILE"

      # find tissue, needs improvement
      if [[ "$(wc -c < $FILE )" -ge "$MINBYTESIZE" ]]; then
        # more than MINBYTESIZE bytes... tissue found
        # fit within width and height
        TISSUE="tissue";
        mv "$FILE" "${filename}.${TISSUE}.png"
      else 
        # no tissue found
        TISSUE="empty";
        if [ "$KEEPEMPTYTILES" == "true" ]; then
           mv "$FILE" "${filename}.${TISSUE}.png"
        else
          rm -rf "$FILE"
        fi
      fi;
    done
  done
  date2="$(date +'%s')"
  diff="$(($date2-$date1))"
  debug "Done tiles; $(($diff / 60)) minutes and $(($diff % 60)) seconds"
  rm -rf "$TMPSTORAGE"
}

createTilesOpenslide(){
  TMPSTORAGE="$(mktemp -d -t slide2Tiles_XXXXXXXXXXXX)" # -t relative to $TMPDIR, so it should be HPC save...
  AR_TIFFSPLIT_SUFFIX=("aaa" "aab" "aac" "aad" "aae" "aaf" "aag" "aah" "aai" "aaj" "aak" "aal" "aam" "aan" "aao" "aap" "aaq" "aar" "aas" "aat" "aau" "aav" "aaw" "aax" "aay" "aaz") # aa{a..z} standard suffix of tiffsplit
  debug "Virtual slide: $S"
  debug "Layer: $LAYER"
  debug "Suffix array: $AR_TIFFSPLIT_SUFFIX"
  # extract layer to tmp
  TMPS="$TMPSTORAGE"/"$FILENAMESCAN"
  cp "$S" "$TMPS"
  debug "TMPS: $TMPS"
  cd "$TMPSTORAGE" && tiffsplit "$TMPS" tmp #tmp is the standard prefix of this file, example: tmpaaf.tif
  SLIDE="$TMPSTORAGE"/tmp"${AR_TIFFSPLIT_SUFFIX[${LAYER}]}".tif
  debug "Working slide: $SLIDE"
  mkdir -p "$OUTPUTDIRNAME" # create output directory
  debug "Outputdir: $OUTPUTDIRNAME" 
  width="$(identify -format %w "${SLIDE}")"
  height="$(identify -format %h "${SLIDE}")"
  limit_w="$(($width / $TILESWIDTH))"
  limit_h="$(($height / $TILESHEIGHT))"

  for y in $(seq 0 "$limit_h"); do
    for x in $(seq 0 "$limit_w"); do
      # one tile
      tile="${SHORTNAME}.X${y}.Y${x}.tile.png"
      w="$((x * $TILESWIDTH))"
      h="$((y * $TILESHEIGHT))"
      FILE="${OUTPUTDIRNAME}/${tile}"
      filename="${FILE%.*}" # full path without extension
      
      # openslide-write-png [OPTION...] slide x y layer width height output.png
      openslide-write-png "$SLIDE" "$w" "$h" 0 "$TILESWIDTH" "$TILESHEIGHT" "$FILE" # >/dev/null 2>/dev/null # suppress 'JPEGFixupTagsSubsamplingSec' warnings

      # find tissue, needs improvement
      if [[ "$(wc -c < $FILE )" -ge "$MINBYTESIZE" ]]; then
        # more than MINBYTESIZE bytes... tissue found
        # fit within width and height
        TISSUE="tissue";
        mv "$FILE" "${filename}.${TISSUE}.png"
      else 
        # no tissue found
        TISSUE="empty";
        if [ "$KEEPEMPTYTILES" == "true" ]; then
           mv "$FILE" "${filename}"".""${TISSUE}.png"
        else
          rm -rf "$FILE"
        fi
      fi;
    done
  done
  rm -rf "$TMPSTORAGE"
}

# programOutput
programOutput(){
  if ! [[ -f "$MASK" ]] ; then
    createTilesOpenslide
  else
    createTilesConvert
  fi
}

# all check?
checkRequirements

if ! [[ "$IGNOREDEPENDENCIES" == "true" ]]; then
  checkDependencies
fi


# lets go!
programOutput