#!/bin/bash
#
# Description: Cut virtual slides into tiles
# Copyright (C) 2014, B.G.L. Nelissen. All rights reserved.
# Last edit: 8 march 2014
#
# License here.
#
# Respect the Google Shell style guide.
# http://google-styleguide.googlecode.com/svn/trunk/shell.xml
#
# Respect the Google Shell style guide.
# http://google-styleguide.googlecode.com/svn/trunk/shell.xml
#
# add openslide for non masked slides

# Variables
SCRIPTNAME="$(basename $0)"
DESCRIPTIONSHORT="Cut virtual slides into tiles"
DEPENDENCIES=("convert" "parallel")
DEFAULTLAYER=3 # 3
DEFAULTHEIGHT=2000
DEFAULTWIDTH=2000
TMPSTORAGE="$(mktemp -d -t slide2Tiles_XXXXXXXXXXXX)" # -t relative to $TMPDIR, so it should be HPC save...
SLOTS=3
MEMORYLIMIT="$((14 * $SLOTS))GB" # 14 GB per slot

# Errors go to stderr
err() {
  echo "ERROR: $@" >&2
}

# Debug go to stdout
debug() {
  echo "DEBUG $(date +'%Y-%m-%d %H:%M:%S'): $@" >&1 # or >/dev/null
}

# usage message
usage() {
cat <<- EOF
usage:  $SCRIPTNAME [options] [path/]file
        [--help]
EOF
}
# help message
helpMessage() {
cat <<- EOF
${SCRIPTNAME}: ${DESCRIPTIONSHORT}

$(usage)

options:
  -f, --file[=FILE]         virtual slide to create tiles from
  -m, --mask[=FILE]         black mask for excluding parts of the virtual slide 
  --layer[=INT]             force specific layer [$DEFAULTLAYER]
  --height[=PIXELS]         tile height in pixels [$DEFAULTHEIGHT]
  --width[=PIXELS]          tile width in pixels [$DEFAULTWIDTH]
  
  --help                    display this help and exit

examples:
  $SCRIPTNAME "file.tif"
  $SCRIPTNAME  --mask="file.mask.png" --file="file.tif"

multiple files at once:
  find -L ./ -name "*tif" | parallel $SCRIPTNAME --mask="{.}.mask.png" --file="{}"

HPC qsub job submission: (fetch full path [=j])
  for i in \$(find -L ./ -name "*tif"); do
    j="\$(echo "\$(cd "\$(dirname "\$i")"; pwd)"/"\$(basename "\$i")")"; \\
    echo "$(command -v "$SCRIPTNAME")" --mask="\${j%.*}".mask.png --file="\${j}" |\\
    qsub -N "\$(basename \"\${j%.*}\")" -pe threaded $SLOTS -q short -e "\${j%.*}.e.log" -o "\${j%.*}.e.log"
  done

dependencies: $DEPENDENCIES

Cut slides into tiles for further processing. Reasonable tile size is
2000 by 2000 pixels (default).

Report bugs to <b.g.l.nelissen@gmail.com>
slideToolkit (C) 2014, B.G.L. Nelissen
EOF
}

# Menu
# Empty variables
FILE=""
LAYER=""
# illegal option
illegalOption() {
cat <<- EOF
$SCRIPTNAME: illegal option $1
$(usage)
EOF
exit 1
}
# loop through options
while :
do
  case $1 in
    --help | -\?)
      helpMessage
      exit 0 ;;
    -f | --file)
      FILE=$2
      shift 2 ;;
    --file=*)
      FILE=${1#*=}
      shift ;;
    -m | --mask)
      MASK=$2
      shift 2 ;;
    --mask=*)
      MASK=${1#*=}
      shift ;;
    --layer=*)
      LAYER=${1#*=}
      shift ;;
    --height=*)
      HEIGHT=${1#*=}
      shift ;;
    --width=*)
      WIDTH=${1#*=}
      shift ;;
    --) # End of all options
      shift
      break ;;
    -*)
      illegalOption "$1"
      shift ;;
    *)  # no more options. Stop while loop
      break ;;
  esac
done

# DEFAULTS
# set FILE default
if [ "$FILE" != "" ]; then
  FILE="$FILE"
else
  FILE="$1"
fi
# set LAYER default
if [ "$LAYER" != "" ]; then
  LAYER="$LAYER"
else
  LAYER="$DEFAULTLAYER"
fi
# set HEIGHT default
if [ "$HEIGHT" != "" ]; then
  HEIGHT="$HEIGHT"
else
  HEIGHT="$DEFAULTHEIGHT"
fi
# set WIDTH default
if [ "$WIDTH" != "" ]; then
  WIDTH="$WIDTH"
else
  WIDTH="$DEFAULTWIDTH"
fi


# requirements
checkRequirements() {
  if ! [[ -f "$FILE" ]] ; then
    echo "No such file: $FILE">&2;
    usage
    exit 1
  fi
  if ! [[ -f "$MASK" ]] ; then
    echo "No such mask: $MASK">&2;
    usage
    exit 1
  fi
  regexnumeric='^[0-9]+$'
  if ! [[ "$LAYER" =~ $regexnumeric ]] ; then
    echo "Layer is not an integer: $LAYER">&2;
    usage
    exit 1
  fi
  if ! [[ "$HEIGHT" =~ $regexnumeric ]] ; then
    echo "Height is not valid: $HEIGHT">&2;
    usage
    exit 1
  fi
  if ! [[ "$WIDTH" =~ $regexnumeric ]] ; then
    echo "Width is not valid: $WIDTH">&2;
    usage
    exit 1
  fi

  # check input files
  S="$(echo $(cd $(dirname $FILE); pwd)/$(basename $FILE))" # full path $FILE
  INPUTFILENAME="${S%.*}"             # full path without extension
  INPUTSCANEXT="${S##*.}"             # input scan extension only
  M="${MASK}"       # input mask
  FILENAMESCAN="${S##*/}"
  SHORTNAME="$(basename $INPUTFILENAME)"
  FILENAMEMASK="${M##*/}"
  FOLDERINPUT="`dirname "$S"`"         # input folder
  TMPSTORAGE="$TMPSTORAGE"                    # CAREFUL THIS FOLDER GETS DELETED! # CAREFUL WITH THIS MOTHERFUCKER
  FOLDEROUTPUT="`dirname "$S"`"        # output directory
  LAYER="$LAYER"                             # layer 3 is 20x (for Roche scanner)
  TILESWIDTH="$WIDTH"
  TILESHEIGHT="$HEIGHT"
  buffer="${TMPSTORAGE}/${SHORTNAME}.mpc"
  STARTDATE="$(date)"
    
  if ! [[ -f "$S" ]] ; then
    err "No such scan: $S"
    usage
    exit 1
  fi
  
  if ! [[ -f "$M" ]] ; then
    err "No such mask: $M"
    usage
    exit 1
  fi
  
  if ! [[ "$INPUTSCANEXT" =~ (tif|tiff|TIF|TIFF) ]] ; then
    err "TIF or TIFF extension expected. (case insensitive)"
    err "Extension found: $INPUTSCANEXT"
    usage
    exit 1
  fi
}

# Dependencies
checkDependencies(){
  DEPENDENCIES="$DEPENDENCIES"
  DEPS=""
  for DEP in "$DEPENDENCIES"; do
    if [[ 0 != $(command -v "$DEP" >/dev/null ;echo $?) ]]; then
      DEPS=$(echo "$DEPS $DEP") # create `array` with unknown dependencies
    fi
  done
  if [[ "" != $(echo "$DEPS" | perl -p -e 's/ //g') ]]; then
    for d in "$DEPS"; do
      echo "Missing dependency: \"$d\""
    done
    exit 1
  fi
}

# actual program
programOutput(){
  debug "Virtual slide: $S"
  dimensionsslide="$(identify -format %w "${S}[${LAYER}]")"x"$(identify -format %h "${S}[${LAYER}]")"
  debug "Create buffer [$dimensionsslide]; $buffer"
  date1="$(date +'%s')"
  convert -limit area "${MEMORYLIMIT}" "${S}[${LAYER}]" \( "${M}" -fuzz 99% -transparent white -scale ${dimensionsslide} -negate \) -composite -fuzz 3% -trim +repage -bordercolor white -border 30x30 +repage "${buffer}"
  date2="$(date +'%s')"
  diff="$(($date2-$date1))"
  debug "Done buffer; $(($diff / 60)) minutes and $(($diff % 60)) seconds"

  date1="$(date +'%s')"
  convert -limit area "${MEMORYLIMIT}" "${buffer}" -scale "$TILESWIDTH"x"$TILESHEIGHT" "${INPUTFILENAME}.bufferexample.png"
  date2="$(date +'%s')"
  diff="$(($date2-$date1))"
  debug "bufferexample.png created; $(($diff / 60)) minutes and $(($diff % 60)) seconds"

  mkdir -p "$INPUTFILENAME" # create output directory
  # create tiles per row, measure dimensions of newly create image
  width="$(identify -format %w ${buffer})"
  height="$(identify -format %h ${buffer})"
  dimensionsbuffer="$width"x"$height"
  limit_w="$(($width / $TILESWIDTH))"
  limit_h="$(($height / $TILESHEIGHT))"

  debug "Creating tiles [$dimensionsbuffer]; tile size [${TILESWIDTH}x${TILESHEIGHT}]"
  date1="$(date +'%s')"
  for y in $(seq 0 "$limit_h"); do
    for x in $(seq 0 "$limit_w"); do
      # one tile
      tile="${SHORTNAME}.X${y}.Y${x}.tile.png"
      w="$((x * $TILESWIDTH))"
      h="$((y * $TILESHEIGHT))"
      FILE="${INPUTFILENAME}/${tile}"
      filename="${FILE%.*}" # full path without extension
      convert -limit area "$MEMORYLIMIT" "$buffer" -crop "${TILESWIDTH}x${TILESHEIGHT}+$w+$h" +repage "$FILE"
    
      # find tissue, needs improvement
      if [[ "$(wc -c < $FILE )" -ge 100000 ]]; then
        # more than 100000 bytes...
        TISSUE="tissue"; 
#         VERBOSE=$( convert $FILE -colorspace HSL -verbose info: );
#         RGBO=$( echo "$VERBOSE" | grep mean | awk '{print $2}' )
#         RED=$( echo $RGBO | awk '{print $1}'  | cut -d. -f1 ); 
#         GREEN=$( echo $RGBO | awk '{print $2}'| cut -d. -f1 ); 
#         BLUE=$( echo $RGBO | awk '{print $3}' | cut -d. -f1 );
#         BLUESD=$( echo "$VERBOSE" | grep 'standard deviation' | awk '{print $3}' | sed -n 3p | cut -d. -f1 )
#         if [ $RED -ge 51 ] && [ $GREEN -ge 12 ];
#         then 
#           TISSUE="tissue";
#         elif [ $BLUESD -ge 6 ];
#         then  
#           TISSUE="tissue"; 
#         else
#           TISSUE="empty"; 
#         fi; 
      else 
          TISSUE="empty"; 
      fi;
        # rename file
      mv "$FILE" "${filename}.${TISSUE}.png"
    done
  done
  date2="$(date +'%s')"
  diff="$(($date2-$date1))"
  debug "Done tiles; $(($diff / 60)) minutes and $(($diff % 60)) seconds"
  rm -rf "$TMPSTORAGE"
}

# all check?
checkRequirements
checkDependencies

# lets go!
programOutput
