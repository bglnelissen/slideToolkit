#!/bin/bash

### Creating display functions
### Setting colouring
NONE='\033[00m'
BOLD='\033[1m'
ITALIC='\033[3m'
OPAQUE='\033[2m'
FLASHING='\033[5m'
UNDERLINE='\033[4m'

RED='\033[01;31m'
GREEN='\033[01;32m'
YELLOW='\033[01;33m'
PURPLE='\033[01;35m'
CYAN='\033[01;36m'
WHITE='\033[01;37m'
### Regarding changing the 'type' of the things printed with 'echo'
### Refer to: 
### - http://askubuntu.com/questions/528928/how-to-do-underline-bold-italic-strikethrough-color-background-and-size-i
### - http://misc.flogisoft.com/bash/tip_colors_and_formatting
### - http://unix.stackexchange.com/questions/37260/change-font-in-echo-command

### echo -e "\033[1mbold\033[0m"
### echo -e "\033[3mitalic\033[0m" ### THIS DOESN'T WORK ON MAC!
### echo -e "\033[4munderline\033[0m"
### echo -e "\033[9mstrikethrough\033[0m"
### echo -e "\033[31mHello World\033[0m"
### echo -e "\x1B[31mHello World\033[0m"

function echobold { #'echobold' is the function name
    echo -e "${BOLD}${1}${NONE}" # this is whatever the function needs to execute, note ${1} is the text for echo
}
function echoitalic { 
    echo -e "${ITALIC}${1}${NONE}" 
}
function echocyan { 
    echo -e "${CYAN}${1}${NONE}" 
}

function echonooption { 
    echo -e "${OPAQUE}${RED}${1}${NONE}"
}

# errors
function echoerrorflash { 
    echo -e "${RED}${BOLD}${FLASHING}${1}${NONE}" 
}
function echoerror { 
    echo -e "${RED}${1}${NONE}"
}

# errors no option
function echoerrornooption { 
    echo -e "${YELLOW}${1}${NONE}"
}
function echoerrorflashnooption { 
    echo -e "${YELLOW}${BOLD}${FLASHING}${1}${NONE}"
}

### MESSAGE FUNCTIONS
script_copyright_message() {
	echo ""
	THISYEAR=$(date +'%Y')
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	echo "+ The MIT License (MIT)                                                                                 +"
	echo "+ Copyright (c) 2016-${THISYEAR} Sander W. van der Laan                                                        +"
	echo "+                                                                                                       +"
	echo "+ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and     +"
	echo "+ associated documentation files (the \"Software\"), to deal in the Software without restriction,         +"
	echo "+ including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, +"
	echo "+ and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, +"
	echo "+ subject to the following conditions:                                                                  +"
	echo "+                                                                                                       +"
	echo "+ The above copyright notice and this permission notice shall be included in all copies or substantial  +"
	echo "+ portions of the Software.                                                                             +"
	echo "+                                                                                                       +"
	echo "+ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT     +"
	echo "+ NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                +"
	echo "+ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES  +"
	echo "+ OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN   +"
	echo "+ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                            +"
	echo "+                                                                                                       +"
	echo "+ Reference: http://opensource.org.                                                                     +"
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
}
script_arguments_error() {
	echoerror "$1" # ERROR MESSAGE
	echoerror "- Argument #1   -- name of the stain as it appears in the filenames, e.g. FIBRIN."
	echoerror "- Argument #2   -- path_to CellProfiler pipeline, e.g. FIBRIN.cppipe."
	echoerror "- Argument #3   -- path_to working directory, i.e. where all the image-subdirectories are."
	echoerror "- Argument #4   -- Path to file containing the study numbers to process"
	echoerror "- Argument #5   -- output filename where the CellProfiler results are stored, e.g. Image.csv (delimiter is assumed '_')."
	echoerror "- Argument #6   -- email address to send aborted/error jobs too, e.g. y.name@umcutrecht.nl."
	echoerror "- Argument #7   -- by default emails are send when jobs are aborted/error, you can change that here, e.g. you can choose: BEGIN=begin of job; END=end of job; FAIL=abort of job; ALL=all message job; NONE=no mail is send."
	echoerror "- Argument #8   -- Patch size. Size of the tiles in pixels, e.g. 512 indicates a tile of 512x512; slideToolKit was tested using patches of 2000x2000. [default: 2000]"
	echoerror "- Argument #9   -- Down-sampling. Down-sampling number, to indicate the magnification to use, e.g. with a maximum magnification of 40x, a 1 indicates a downsample to 20x. [default: 1]"
	echoerror "- Argument #10   -- Mask directory. Path to optional masks directory of given images. [OPTIONAL]"
	echoerror ""
	echoerror "An example command would be: slideQuantify [arg1: STAIN] [arg2: path_to_cellprofiler_pipeline] [arg3: path_to_working_directory] [arg4: path_to_procces_file] [arg5: Image.csv] [arg6: y.name@umcutrecht.nl] [arg7: FAIL] [arg8: 2000] [arg9: 2] [args10: path/to/dir]"
	echoerror ""
	echoerror "Please note that this command should be run within the working directory (Argument #3)."
	echoerror "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  	# The wrong arguments are passed, so we'll exit the script now!
  	exit 1
}


echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echobold "                               slideQuantify V2"
echo ""
echoitalic "* Written by  : Sander W. van der Laan; Tim Bezemer; Tim van de Kerkhof;"
echoitalic "                Yipei Song; Tim Peters"
echoitalic "* E-mail      : s.w.vanderlaan-2@umcutrecht.nl"
echoitalic "* Last update : 2024-01-04"
echoitalic "* Version     : 2.1.3"
echo ""
echoitalic "* Description : This script will start the quantification for a given stain"
echoitalic "                in a given project directory. "
echoitalic "                This is SLURM based."
echo ""
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

### REQUIRED | GENERALS	
STAIN="${1}" # Depends on arg1
PIPELINE="${2}" # Depends on arg2
PROJECTDIR="${3}" # Depends on arg3
PROCESSFILE="${4}" # Depends on arg4
OUTPUTFILENAME="${5}" # Depends on arg5
EMAIL="${6}" # Depends on arg5
MAILSETTING="${7}" # Depends on arg6

PATCHSIZE="${8}" # Depends on arg7
OUTPUTDOWN="${9}" # Depends on arg8

MASKSDIR="${10:-slideToolkit/masks}"

### Set slideToolKit DIRECTORY
SLIDETOOLKITDIR="/hpc/local/Rocky8/dhl_ec/software/slideToolKit"

QJOB_MEM_SLIDEMASK="8G"
QJOB_TIME_SLIDEMASK="00:15:00"

QJOB_MEM_SLIDETILES="24G"
QJOB_TIME_SLIDETILES="00:20:00" # emperical evidence shows Â±20 minutes

QJOB_MEM_SLIDENORM="8G"
QJOB_TIME_SLIDENORM="00:15:00"

QJOB_MEM_CP="12G"
QJOB_TIME_CP="13:00:00"

QJOB_MEM_WRAP="8G"
QJOB_TIME_WRAP="00:15:00"

### START of if-else statement for the number of command-line arguments passed ###
if [[ $# -lt 8 ]]; then 
	echo "Oh, computer says no! Number of arguments found \"$#\"."
	script_arguments_error "You must supply correct (number of) arguments when running *** slideQuantify ***!"
		
else
    echobold "Cleaning up house, first."
	mkdir -pv "$PROJECTDIR"/slideToolkit/logs
	mkdir -pv "$PROJECTDIR"/slideToolkit/errors

    cd $PROJECTDIR

    PROCESSFILELINES=$(cat $PROCESSFILE)
    for SNR in $PROCESSFILELINES; do
        sleep 0.2
        echobold "Processing images of file [ ${SNR} ] in directory [ ${PROJECTDIR}slideToolkit/ ] for staining [ ${STAIN} ]."

        THIS_SLIDEMASK=${SNR}_slideMask
        THIS_SLIDETILES=${SNR}_slideTiles
		THIS_SLIDENORMALIZE=${SNR}_slideNormalize
		THIS_CELLPROFILER=${SNR}_CellProfiler
		THIS_WRAPUP=${SNR}_WrapUp

		echo ""
		pwd

        ### Checking if an analysis was done before
        # if [[ -s cp_output/"$STAIN"_Image.csv.gz ]]; then 
		# 	echoitalic "Checking if this file was processed before; cp_output/${STAIN}_Image.csv.gz should be present ....."
		# 	ls -lh cp_output/*.gz
		# 	cd .. ; 
		# 	INDEX=$((INDEX+1)); 
		# 	echo "..... Analysis was already done!"; 
		# 	continue; 
		# fi

        echo "..... Processing file for the first time. Submitting job for: "
		
		rm -rfv "$PROJECTDIR"/slideToolkit/logs/"$SNR"_*
		rm -rfv "$PROJECTDIR"/slideToolkit/errors/"$SNR"_*

		### Check if masks directory is given
		if [ -z "$9" ]
		then
			### TODO: Make mask of file
			echo ""
			echoitalic "* slideMask for creating mask from image. [$THIS_SLIDEMASK]"
			JOB_ID_THIS_SLIDEMASK=$(sbatch -J ${THIS_SLIDEMASK} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_SLIDEMASK}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_SLIDEMASK}.log  --mem=${QJOB_MEM_SLIDEMASK} --time=${QJOB_TIME_SLIDEMASK} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --parsable ${SLIDETOOLKITDIR}/slideQuantify_v2_1_entropy_segmentation.sh ${PROJECTDIR} ${MASKSDIR} ${SNR} )
		else
			echo ""
			echoitalic "* Path to masks directory given. Masking step skipped."
		fi
        

        ### slideTiles
        echo ""
		echoitalic "* slideTiles for extracting tiles. [ $THIS_SLIDETILES ]"
	
		### Check if masks directory is given
		# if [ -z "$9" ]
		# then
		# 	### run slideTiles with dependency on masking step
		# 	JOB_ID_THIS_SLIDETILES=$(sbatch -J ${THIS_SLIDETILES} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_SLIDETILES}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_SLIDETILES}.log  --mem=${QJOB_MEM_SLIDETILES} --time=${QJOB_TIME_SLIDETILES} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --depend=afterany:$JOB_ID_THIS_SLIDEMASK --parsable ${SLIDETOOLKITDIR}/slideQuantify_v2_2_extract_tiles.sh ${PROJECTDIR} ${MASKSDIR} ${OUTPUTDOWN} ${PATCHSIZE} ${SNR} )
		# else
		# 	JOB_ID_THIS_SLIDETILES=$(sbatch -J ${THIS_SLIDETILES} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_SLIDETILES}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_SLIDETILES}.log  --mem=${QJOB_MEM_SLIDETILES} --time=${QJOB_TIME_SLIDETILES} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --parsable ${SLIDETOOLKITDIR}/slideQuantify_v2_2_extract_tiles.sh ${PROJECTDIR} ${MASKSDIR} ${OUTPUTDOWN} ${PATCHSIZE} ${SNR} )
		# fi

        ### slideNormalize
        echo ""
		echoitalic "* slideNormalize for normalization of tiles. [ $THIS_SLIDENORMALIZE ]"
	
        # JOB_ID_THIS_SLIDENORMALIZE=$(sbatch -J ${THIS_SLIDENORMALIZE} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_SLIDENORMALIZE}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_SLIDENORMALIZE}.log  --mem=${QJOB_MEM_SLIDENORM} --time=${QJOB_TIME_SLIDENORM} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --depend=afterany:$JOB_ID_THIS_SLIDETILES --parsable ${SLIDETOOLKITDIR}/slideQuantify_v2_3_tile_normalizing.sh ${PROJECTDIR}/slideToolkit/_tiles_layer${OUTPUTDOWN}/${SNR}.* )
		### FOR DEBUG
		# JOB_ID_THIS_SLIDENORMALIZE=$(sbatch -J ${THIS_SLIDENORMALIZE} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_SLIDENORMALIZE}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_SLIDENORMALIZE}.log  --mem=${QJOB_MEM_SLIDENORM} --time=${QJOB_TIME_SLIDENORM} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --parsable ${SLIDETOOLKITDIR}/slideQuantify_v2_3_tile_normalizing.sh ${PROJECTDIR}/slideToolkit/_tiles_layer${OUTPUTDOWN}/${SNR}.* )

        ### CellProfiler
		echo ""
		echoitalic "* CellProfiler to analyze images. [ $THIS_CELLPROFILER ]"
	
        # JOB_ID_THIS_CELLPROFILER=$(sbatch -J ${THIS_CELLPROFILER} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_CELLPROFILER}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_CELLPROFILER}.log --mem=${QJOB_MEM_CP} --time=${QJOB_TIME_CP} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --depend=afterany:$JOB_ID_THIS_SLIDENORMALIZE --parsable ${SLIDETOOLKITDIR}/slideQuantify_v2_4_cellprofiler.sh ${PROJECTDIR}/slideToolkit/ ${PIPELINE} ${STAIN} ${SNR} ${PROJECTDIR}/slideToolkit/_tiles_layer${OUTPUTDOWN}/${SNR}.* )
		### FOR DEBUG
		# JOB_ID_THIS_CELLPROFILER=$(sbatch -J ${THIS_CELLPROFILER} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_CELLPROFILER}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_CELLPROFILER}.log --mem=${QJOB_MEM_CP} --time=${QJOB_TIME_CP} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --parsable ${SLIDETOOLKITDIR}/slideQuantify_v2_4_cellprofiler.sh ${PROJECTDIR}/slideToolkit/ ${PIPELINE} ${STAIN} ${SNR} ${PROJECTDIR}/slideToolkit/_tiles_layer${OUTPUTDOWN}/${SNR}.* )
		
		### Wrap Up
		echo ""
		echoitalic "* WrapUp the work we have done, and clean house. [ $THIS_WRAPUP ]"
	
		# JOB_ID_THIS_WRAPUP=$(sbatch -J ${THIS_WRAPUP} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_WRAPUP}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_WRAPUP}.log --mem=${QJOB_MEM_WRAP} --time=${QJOB_TIME_WRAP} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --parsable --depend=afterany:$JOB_ID_THIS_CELLPROFILER ${SLIDETOOLKITDIR}/slideQuantify_v2_5_wrapup.sh ${SNR} ${STAIN} ${OUTPUTFILENAME} ${SLIDETOOLKITDIR} ${PROJECTDIR}/slideToolkit/_tiles_layer${OUTPUTDOWN} )
		### FOR DEBUG
		JOB_ID_THIS_WRAPUP=$(sbatch -J ${THIS_WRAPUP} -e ${PROJECTDIR}/slideToolkit/errors/${THIS_WRAPUP}.errors -o ${PROJECTDIR}/slideToolkit/logs/${THIS_WRAPUP}.log --mem=${QJOB_MEM_WRAP} --time=${QJOB_TIME_WRAP} --mail-type=${MAILSETTING} --mail-user=${EMAIL} --parsable ${SLIDETOOLKITDIR}/slideQuantify_v2_5_wrapup.sh ${SNR} ${STAIN} ${OUTPUTFILENAME} ${SLIDETOOLKITDIR} ${PROJECTDIR}/slideToolkit/_tiles_layer${OUTPUTDOWN} )

    ### END OF for-loop
    done

### END of if-else statement for the number of command-line arguments passed ###
fi

script_copyright_message
